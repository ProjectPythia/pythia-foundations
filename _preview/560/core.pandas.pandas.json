{"version":2,"kind":"Notebook","sha256":"b7f15cba1dd230750c87e59418d023639ca25c4e8caa392e69de412f80a74236","slug":"core.pandas.pandas","location":"/core/pandas/pandas.ipynb","dependencies":[],"frontmatter":{"title":"Introduction to Pandas","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"id":"Project Pythia Community","name":"Project Pythia Community"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/pythia-foundations","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"abbreviations":{"FOSS":"Free and open-source software","VCS":"Version control system","FTP":"File transfer protocol","TCP":"Transmission Control Protocol"},"numbering":{"title":{"offset":2}},"source_url":"https://github.com/projectpythia/pythia-foundations/blob/HEAD/core/pandas/pandas.ipynb","edit_url":"https://github.com/projectpythia/pythia-foundations/edit/HEAD/core/pandas/pandas.ipynb","thumbnail":"/_preview/560/build/191916302b89df91076600f1f9e0bf43.svg","exports":[{"format":"ipynb","filename":"pandas.ipynb","url":"/_preview/560/build/pandas-9d2f61d9aa40a88b28ec5d6deb04dfc2.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","children":[{"type":"image","style":{"width":"800px"},"url":"/_preview/560/build/191916302b89df91076600f1f9e0bf43.svg","alt":"pandas Logo","key":"nPVpjoLkmx","urlSource":"https://github.com/pandas-dev/pandas/raw/main/web/pandas/static/img/pandas.svg"}],"key":"JsU7SmOoeO"},{"type":"thematicBreak","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jO6v1GgmYR"}],"key":"dgtavl6lUn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tUl7Ve7M0j"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"n1s6OquLwj"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Introduction to pandas ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ptFkT5lsDk"},{"type":"citeGroup","kind":"parenthetical","children":[{"type":"cite","kind":"parenthetical","label":"reback2020pandas","identifier":"reback2020pandas","children":[{"type":"text","value":"The Pandas Development Team, 2020","key":"qjupvUBZ8a"}],"enumerator":"1","key":"c3EbN3Tw9C"}],"key":"U9L8b01ALT"},{"type":"text","value":" data structures","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"UJhcXEsvQe"}],"key":"YhhzxW449v"}],"key":"aa2y7YkGRm"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"How to slice and dice pandas dataframes and dataseries","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EY3ZwV2VhO"}],"key":"fblTIrBmEy"}],"key":"uJCFrRkDmK"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"How to use pandas for exploratory data analysis","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"FodMLxJDco"}],"key":"ynPh2JSSwN"}],"key":"VyGPzmiZXX"}],"key":"ujAWHryLS8"},{"type":"heading","depth":2,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"xKRicMt1VU"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"wvc3qatGhQ"},{"type":"table","position":{"start":{"line":8,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"IdSJWzTgmc"}],"key":"nkNk7LsRzf"},{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"TTVun7VLhH"}],"key":"ybdPkjstVT"},{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"IQfWTWhn56"}],"key":"hHkF7mR0wu"}],"key":"vO0EkhCGf9"},{"type":"tableRow","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"/foundations/quickstart","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Python Quickstart","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"DqlLF1z0eJ"}],"urlSource":"../../foundations/quickstart","dataUrl":"/foundations.quickstart.json","internal":true,"protocol":"file","key":"wFoCR1ZOCv"}],"key":"nBYfq6sKMu"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LN0egD24KG"}],"key":"ZRwkHioXAs"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Intro to ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"zghoZZwYgB"},{"type":"inlineCode","value":"dict","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"wEJdyIQqvT"}],"key":"m11zsAZorv"}],"key":"a8SrNyjHPB"},{"type":"tableRow","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"/core/numpy/numpy-basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Numpy Basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"W5gSX2Fx6k"}],"urlSource":"../numpy/numpy-basics","dataUrl":"/core.numpy.numpy-basics.json","internal":true,"protocol":"file","key":"YYYRdpQPdi"}],"key":"rQxXpjMTMY"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NpZ8iKUDwZ"}],"key":"AVEQLAw9Xw"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"citeGroup","kind":"narrative","children":[{"type":"cite","kind":"narrative","label":"harris2020array","identifier":"harris2020array","children":[{"type":"text","value":"Harris ","key":"PkSrXj79zD"},{"type":"emphasis","children":[{"type":"text","value":"et al.","key":"Ipn4CJRpx4"}],"key":"YWoXpCI14a"},{"type":"text","value":" (2020)","key":"O5me81oAp2"}],"enumerator":"2","key":"m3ykQ9uP8I"}],"key":"DlgTQJI38c"}],"key":"J1AW3eHwfs"}],"key":"BhybzIuBys"}],"key":"GzHzStPEPV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"vcmZkFwF2A"}],"key":"KARaavGkwG"},{"type":"text","value":": 60 minutes","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"qKKVYkmpDi"}],"key":"A42i6N8G7Q"}],"key":"zkoOOVIqOG"}],"key":"uue4vqAvfg"}],"key":"Ce6Tlm6Iq6"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oOPA7cJmhj"}],"key":"IAPKtJKI8g"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e1N0jm2crI"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"m6lV6Nczre"}],"key":"gwu5EFgyB1"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You will often see the nickname ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jLOAYjKzjC"},{"type":"inlineCode","value":"pd","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qGkBj3O0vw"},{"type":"text","value":" used as an abbreviation for pandas in the import statement, just like ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HoWj6LV7Ms"},{"type":"inlineCode","value":"numpy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HjVEuGwI0l"},{"type":"text","value":" is often imported as ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"feKdPDtcuU"},{"type":"inlineCode","value":"np","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FAiYhk0yGS"},{"type":"text","value":". We also import the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kFXRKnJgFz"},{"type":"inlineCode","value":"DATASETS","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VeHW4xJHN7"},{"type":"text","value":" class from ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aGD9RjYm1b"},{"type":"inlineCode","value":"pythia_datasets","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xaiZml13wX"},{"type":"text","value":", which allows us to use example datasets created for Pythia.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eG6cKiOjl7"}],"key":"GhSINMnC9Y"}],"key":"L35UyAzQd7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nfrom pythia_datasets import DATASETS","key":"seLsST7wAV"},{"type":"output","id":"VIoCv8o1KMQ9kaw3mhsqC","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pythia_datasets/__init__.py:4: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.\n  from pkg_resources import DistributionNotFound, get_distribution\n"}],"key":"sLtKG1Y1a1"}],"key":"CHnJLwaw5Q"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LMJzvY6lIk"},{"type":"link","url":"https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RSKACLNsLZ"}],"urlSource":"https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe","key":"N7z9PmTd6j"},{"type":"text","value":"...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wm1mP5JG7J"}],"identifier":"the-pandas-dataframe","label":"The pandas DataFrame...","html_id":"the-pandas-dataframe","implicit":true,"key":"dBgtgPBMAC"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"...is a ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ILn0ptG9cy"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"labeled","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"sMFgEIumx1"}],"key":"Uq7dROWVhO"},{"type":"text","value":", two-dimensional columnar structure, similar to a table, spreadsheet, or the R ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"bKv6PufoqM"},{"type":"inlineCode","value":"data.frame","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dNyamT66lH"},{"type":"text","value":".","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ekPb5po8mw"}],"key":"nI56qlv1tE"},{"type":"image","url":"/_preview/560/build/0d827165ba9c730294f2e615e0d2bf86.svg","alt":"dataframe schematic","title":"Schematic of a pandas DataFrame","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"y1c8f5Rp2a","urlSource":"https://github.com/pandas-dev/pandas/raw/main/doc/source/_static/schemas/01_table_dataframe.svg"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"PY2BgcZIXh"},{"type":"inlineCode","value":"columns","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"lI72Lkrqx5"},{"type":"text","value":" that make up our ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"esnYz0o5uu"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"yqFkMNMR1Z"},{"type":"text","value":" can be lists, dictionaries, NumPy arrays, pandas ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"kJ5hB8xyfu"},{"type":"inlineCode","value":"Series","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Bnf2oBe7ks"},{"type":"text","value":", or many other data types not mentioned here. Within these ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"SIZHudN0gz"},{"type":"inlineCode","value":"columns","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"JvxzkEExtD"},{"type":"text","value":", you can have data values of many different data types used in Python and NumPy, including text, numbers, and dates/times. The first column of a ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"By9w6GGLmO"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HloNYCNat2"},{"type":"text","value":", shown in the image above in dark gray, is uniquely referred to as an ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"tIUHHtSqeq"},{"type":"inlineCode","value":"index","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Srjz8qeqo2"},{"type":"text","value":"; this column contains information characterizing each row of our ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"brS5tSv35C"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"cwAxVx21rD"},{"type":"text","value":". Similar to any other ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"fZ3c8oHcSX"},{"type":"inlineCode","value":"column","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"JGyrqF8Y4h"},{"type":"text","value":", the ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jc40Bwowtz"},{"type":"inlineCode","value":"index","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"RmPxGt3urm"},{"type":"text","value":" can label rows by text, numbers, datetime objects, and many other data types. Datetime objects are a quite popular way to label rows.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"q5J2scD7p3"}],"key":"pUW9fLVVsn"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"For our first example using Pandas DataFrames, we start by reading in some data in comma-separated value (","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"vMcTSoHKwi"},{"type":"inlineCode","value":".csv","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"AxSTW6rCAU"},{"type":"text","value":") format. We retrieve this dataset from the Pythia ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"DHCKBvUmlg"},{"type":"inlineCode","value":"DATASETS","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"nv5lpvBoIk"},{"type":"text","value":" class (imported at the top of this page); however, the dataset was originally contained within the NCDC teleconnections database. This dataset contains many types of geoscientific data, including El Nino/Southern Oscillation (ENSO) indices. See ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"zGqaLJjDhd"},{"type":"link","url":"https://www.ncei.noaa.gov/access/monitoring/enso/sst","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"fxDYWziV2V"}],"urlSource":"https://www.ncei.noaa.gov/access/monitoring/enso/sst","key":"tVlouD715z"},{"type":"text","value":" for more information on these indices and the underlying data.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"tbpqsDKuab"}],"key":"AXCvRzY1Y9"}],"key":"sWhyF8oDCS"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-info","children":[{"type":"paragraph","children":[{"type":"text","value":"Info","key":"cSHEwwoV4i"}],"key":"gxArmITew0"},{"type":"text","value":"As described above, we are retrieving the datasets for these examples from Project Pythia's custom library of example data. In order to retrieve datasets from this library, you must use the statement ","key":"XWaJ0lAJhz"},{"type":"inlineCode","value":"from pythia_datasets import DATASETS","key":"RWhruxrpsk"},{"type":"text","value":". This is shown and described in the Imports section at the top of this page. The ","key":"goslgnUNoc"},{"type":"inlineCode","value":"fetch()","key":"mK5Vk2S4xg"},{"type":"text","value":" method of the ","key":"JQmnys6cxM"},{"type":"inlineCode","value":"DATASETS","key":"JQ1vrKM3u4"},{"type":"text","value":" class will automatically download the data file specified as a string argument, in this case ","key":"MzlsWrkofx"},{"type":"inlineCode","value":"enso_data.csv","key":"ec2yveCqFH"},{"type":"text","value":", and cache the file locally, assuming the argument corresponds to a valid Pythia example dataset. This is illustrated in the following example.","key":"qKDVI8O0aU"}],"key":"tuwHISmCWd"}],"key":"hTerhWwhry"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"filepath = DATASETS.fetch('enso_data.csv')","key":"wS31QF3bEc"},{"type":"output","id":"UlTxuu98SRRuuJ5xx8Gkx","data":[{"output_type":"stream","name":"stderr","text":"Downloading file 'enso_data.csv' from 'https://github.com/ProjectPythia/pythia-datasets/raw/main/data/enso_data.csv' to '/home/runner/.cache/pythia-datasets'.\n"}],"key":"cYpGEUx9pA"}],"key":"a2osul8t0l"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Once we have a valid path to a data file that Pandas knows how to read, we can open it, as shown in the following example:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kxo3Y8hhTp"}],"key":"HppYS1khmK"}],"key":"XLrq1gxvJn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df = pd.read_csv(filepath)","key":"HzNzoOxZeS"},{"type":"output","id":"ghyOo3ngGuvzIAMQQ68Or","data":[],"key":"Vu2mlfv0YR"}],"key":"fv6ArKBw2P"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we print out our ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZwsKM6CXTU"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JHKHvEeLp7"},{"type":"text","value":", it will render as text by default, in a tabular-style ASCII output, as shown in the following example. However, if you are using a Jupyter notebook, there exists a better way to print ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"olr5b3pMTt"},{"type":"inlineCode","value":"DataFrames","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sTxwhsQxwm"},{"type":"text","value":", as described below.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jVSm6oZvlO"}],"key":"Yy5agZ9WMS"}],"key":"kwSZH1yDV0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(df)","key":"GicVa1VHgw"},{"type":"output","id":"K-6l2Z0VG2_PaonAme3Du","data":[{"output_type":"stream","name":"stdout","text":"       datetime  Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  \\\n0    1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   \n1    1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   \n2    1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   \n3    1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   \n4    1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   \n..          ...     ...         ...    ...        ...    ...        ...   \n467  2020-12-01   22.16       -0.60  24.38      -0.83  27.65      -0.95   \n468  2021-01-01   23.89       -0.64  25.06      -0.55  27.10      -1.25   \n469  2021-02-01   25.55       -0.66  25.80      -0.57  27.20      -1.00   \n470  2021-03-01   26.48       -0.26  26.80      -0.39  27.79      -0.55   \n471  2021-04-01   24.89       -0.80  26.96      -0.65  28.47      -0.21   \n\n     Nino34  Nino34anom  \n0     26.72        0.15  \n1     26.70       -0.02  \n2     27.20       -0.02  \n3     28.02        0.24  \n4     28.54        0.69  \n..      ...         ...  \n467   25.53       -1.12  \n468   25.58       -0.99  \n469   25.81       -0.92  \n470   26.75       -0.51  \n471   27.40       -0.49  \n\n[472 rows x 9 columns]\n"}],"key":"bDkkxG85tv"}],"key":"ZgheihWv4o"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As described above, there is a better way to print Pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xId5kI3I2C"},{"type":"inlineCode","value":"DataFrames","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mhJJWsBmyf"},{"type":"text","value":". If you are using a Jupyter notebook, you can run a code cell containing the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"i6eq0sFX8n"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YjrfaTSKqR"},{"type":"text","value":" object name, by itself, and it will display a nicely rendered table, as shown below.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kzomLqQBi6"}],"key":"sLzrGsTYjZ"}],"key":"SCK8A64AoK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df","key":"YeaYBtj3p3"},{"type":"output","id":"OsBT87aiZxVVsOUJE6BIX","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"       datetime  Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  \\\n0    1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   \n1    1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   \n2    1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   \n3    1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   \n4    1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   \n..          ...     ...         ...    ...        ...    ...        ...   \n467  2020-12-01   22.16       -0.60  24.38      -0.83  27.65      -0.95   \n468  2021-01-01   23.89       -0.64  25.06      -0.55  27.10      -1.25   \n469  2021-02-01   25.55       -0.66  25.80      -0.57  27.20      -1.00   \n470  2021-03-01   26.48       -0.26  26.80      -0.39  27.79      -0.55   \n471  2021-04-01   24.89       -0.80  26.96      -0.65  28.47      -0.21   \n\n     Nino34  Nino34anom  \n0     26.72        0.15  \n1     26.70       -0.02  \n2     27.20       -0.02  \n3     28.02        0.24  \n4     28.54        0.69  \n..      ...         ...  \n467   25.53       -1.12  \n468   25.58       -0.99  \n469   25.81       -0.92  \n470   26.75       -0.51  \n471   27.40       -0.49  \n\n[472 rows x 9 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1982-01-01</td>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1982-02-01</td>\n      <td>25.49</td>\n      <td>-0.58</td>\n      <td>26.38</td>\n      <td>0.01</td>\n      <td>28.21</td>\n      <td>0.11</td>\n      <td>26.70</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1982-03-01</td>\n      <td>25.21</td>\n      <td>-1.31</td>\n      <td>26.98</td>\n      <td>-0.16</td>\n      <td>28.41</td>\n      <td>0.22</td>\n      <td>27.20</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1982-04-01</td>\n      <td>24.50</td>\n      <td>-0.97</td>\n      <td>27.68</td>\n      <td>0.18</td>\n      <td>28.92</td>\n      <td>0.42</td>\n      <td>28.02</td>\n      <td>0.24</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1982-05-01</td>\n      <td>23.97</td>\n      <td>-0.23</td>\n      <td>27.79</td>\n      <td>0.71</td>\n      <td>29.49</td>\n      <td>0.70</td>\n      <td>28.54</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>467</th>\n      <td>2020-12-01</td>\n      <td>22.16</td>\n      <td>-0.60</td>\n      <td>24.38</td>\n      <td>-0.83</td>\n      <td>27.65</td>\n      <td>-0.95</td>\n      <td>25.53</td>\n      <td>-1.12</td>\n    </tr>\n    <tr>\n      <th>468</th>\n      <td>2021-01-01</td>\n      <td>23.89</td>\n      <td>-0.64</td>\n      <td>25.06</td>\n      <td>-0.55</td>\n      <td>27.10</td>\n      <td>-1.25</td>\n      <td>25.58</td>\n      <td>-0.99</td>\n    </tr>\n    <tr>\n      <th>469</th>\n      <td>2021-02-01</td>\n      <td>25.55</td>\n      <td>-0.66</td>\n      <td>25.80</td>\n      <td>-0.57</td>\n      <td>27.20</td>\n      <td>-1.00</td>\n      <td>25.81</td>\n      <td>-0.92</td>\n    </tr>\n    <tr>\n      <th>470</th>\n      <td>2021-03-01</td>\n      <td>26.48</td>\n      <td>-0.26</td>\n      <td>26.80</td>\n      <td>-0.39</td>\n      <td>27.79</td>\n      <td>-0.55</td>\n      <td>26.75</td>\n      <td>-0.51</td>\n    </tr>\n    <tr>\n      <th>471</th>\n      <td>2021-04-01</td>\n      <td>24.89</td>\n      <td>-0.80</td>\n      <td>26.96</td>\n      <td>-0.65</td>\n      <td>28.47</td>\n      <td>-0.21</td>\n      <td>27.40</td>\n      <td>-0.49</td>\n    </tr>\n  </tbody>\n</table>\n<p>472 rows × 9 columns</p>\n</div>","content_type":"text/html"}}}],"key":"FqTAh2LSbu"}],"key":"S2BRNtyawZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yoRSDX8nNr"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ul0mzncJo8"},{"type":"text","value":" index, as described above, contains information characterizing rows; each row has a unique ID value, which is displayed in the index column.  By default, the IDs for rows in a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TJpa5HqwOP"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FjJ4Kq6fAQ"},{"type":"text","value":" are represented as sequential integers, which start at 0.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rXBT981FAR"}],"key":"uYQmBr6QRB"}],"key":"Tx2MIHOLOb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.index","key":"Uon0lQf9kE"},{"type":"output","id":"DlzDvgrRPS-n4HL6PuCjp","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"RangeIndex(start=0, stop=472, step=1)","content_type":"text/plain"}}}],"key":"qXQBMiE5NP"}],"key":"uWubVCBcUL"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"At the moment, the index column of our ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s9UXVUhFKY"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Sh5037sxGc"},{"type":"text","value":" is not very helpful for humans. However, Pandas has clever ways to make index columns more human-readable. The next example demonstrates how to use optional keyword arguments to convert ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"momMsnfgR4"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TUl7QGCPDH"},{"type":"text","value":" index IDs to a human-friendly datetime format.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dN7SgkVw03"}],"key":"yAYQoXdF00"}],"key":"CQQuMDzpUO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df = pd.read_csv(filepath, index_col=0, parse_dates=True)\n\ndf","key":"TCAHuGTWGc"},{"type":"output","id":"lGAE3sr8aka3SJsgMZjPM","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   26.72   \n1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   26.70   \n1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   27.20   \n1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   28.02   \n1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   28.54   \n...            ...         ...    ...        ...    ...        ...     ...   \n2020-12-01   22.16       -0.60  24.38      -0.83  27.65      -0.95   25.53   \n2021-01-01   23.89       -0.64  25.06      -0.55  27.10      -1.25   25.58   \n2021-02-01   25.55       -0.66  25.80      -0.57  27.20      -1.00   25.81   \n2021-03-01   26.48       -0.26  26.80      -0.39  27.79      -0.55   26.75   \n2021-04-01   24.89       -0.80  26.96      -0.65  28.47      -0.21   27.40   \n\n            Nino34anom  \ndatetime                \n1982-01-01        0.15  \n1982-02-01       -0.02  \n1982-03-01       -0.02  \n1982-04-01        0.24  \n1982-05-01        0.69  \n...                ...  \n2020-12-01       -1.12  \n2021-01-01       -0.99  \n2021-02-01       -0.92  \n2021-03-01       -0.51  \n2021-04-01       -0.49  \n\n[472 rows x 8 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>1982-02-01</th>\n      <td>25.49</td>\n      <td>-0.58</td>\n      <td>26.38</td>\n      <td>0.01</td>\n      <td>28.21</td>\n      <td>0.11</td>\n      <td>26.70</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-03-01</th>\n      <td>25.21</td>\n      <td>-1.31</td>\n      <td>26.98</td>\n      <td>-0.16</td>\n      <td>28.41</td>\n      <td>0.22</td>\n      <td>27.20</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-04-01</th>\n      <td>24.50</td>\n      <td>-0.97</td>\n      <td>27.68</td>\n      <td>0.18</td>\n      <td>28.92</td>\n      <td>0.42</td>\n      <td>28.02</td>\n      <td>0.24</td>\n    </tr>\n    <tr>\n      <th>1982-05-01</th>\n      <td>23.97</td>\n      <td>-0.23</td>\n      <td>27.79</td>\n      <td>0.71</td>\n      <td>29.49</td>\n      <td>0.70</td>\n      <td>28.54</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2020-12-01</th>\n      <td>22.16</td>\n      <td>-0.60</td>\n      <td>24.38</td>\n      <td>-0.83</td>\n      <td>27.65</td>\n      <td>-0.95</td>\n      <td>25.53</td>\n      <td>-1.12</td>\n    </tr>\n    <tr>\n      <th>2021-01-01</th>\n      <td>23.89</td>\n      <td>-0.64</td>\n      <td>25.06</td>\n      <td>-0.55</td>\n      <td>27.10</td>\n      <td>-1.25</td>\n      <td>25.58</td>\n      <td>-0.99</td>\n    </tr>\n    <tr>\n      <th>2021-02-01</th>\n      <td>25.55</td>\n      <td>-0.66</td>\n      <td>25.80</td>\n      <td>-0.57</td>\n      <td>27.20</td>\n      <td>-1.00</td>\n      <td>25.81</td>\n      <td>-0.92</td>\n    </tr>\n    <tr>\n      <th>2021-03-01</th>\n      <td>26.48</td>\n      <td>-0.26</td>\n      <td>26.80</td>\n      <td>-0.39</td>\n      <td>27.79</td>\n      <td>-0.55</td>\n      <td>26.75</td>\n      <td>-0.51</td>\n    </tr>\n    <tr>\n      <th>2021-04-01</th>\n      <td>24.89</td>\n      <td>-0.80</td>\n      <td>26.96</td>\n      <td>-0.65</td>\n      <td>28.47</td>\n      <td>-0.21</td>\n      <td>27.40</td>\n      <td>-0.49</td>\n    </tr>\n  </tbody>\n</table>\n<p>472 rows × 8 columns</p>\n</div>","content_type":"text/html"}}}],"key":"gtODJ4FSWq"}],"key":"OYLqWztaxi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.index","key":"NgNFCBkbcQ"},{"type":"output","id":"MGFe-wwVvjiF0-5bVNkFY","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"DatetimeIndex(['1982-01-01', '1982-02-01', '1982-03-01', '1982-04-01',\n               '1982-05-01', '1982-06-01', '1982-07-01', '1982-08-01',\n               '1982-09-01', '1982-10-01',\n               ...\n               '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01',\n               '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01',\n               '2021-03-01', '2021-04-01'],\n              dtype='datetime64[ns]', name='datetime', length=472, freq=None)","content_type":"text/plain"}}}],"key":"l4BXmcotjT"}],"key":"vlXa5jXfa9"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Each of our data rows is now helpfully labeled by a datetime-object-like index value; this means that we can now easily identify data values not only by named columns, but also by date labels on rows. This is a sneak preview of the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iStoZvGzqb"},{"type":"inlineCode","value":"DatetimeIndex","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"riH9nNcZwO"},{"type":"text","value":" functionality of Pandas; this functionality enables a large portion of Pandas’ timeseries-related usage. Don’t worry; ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dQhTyhrEn1"},{"type":"inlineCode","value":"DatetimeIndex","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VJOb91rlgp"},{"type":"text","value":" will be discussed in full detail later on this page. In the meantime, let’s look at the columns of data read in from the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ggXqPjHH3P"},{"type":"inlineCode","value":".csv","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hfMM5soaiE"},{"type":"text","value":" file:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PVcqDtypIV"}],"key":"VIG484RIvs"}],"key":"MmzHgq8ECZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.columns","key":"hmSHRdo5hP"},{"type":"output","id":"dQlC5voP7IVVO7CyxUEdu","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"Index(['Nino12', 'Nino12anom', 'Nino3', 'Nino3anom', 'Nino4', 'Nino4anom',\n       'Nino34', 'Nino34anom'],\n      dtype='object')","content_type":"text/plain"}}}],"key":"nCPjafHOdT"}],"key":"piLv9pnZXj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z4CZvvPin4"},{"type":"link","url":"https://pandas.pydata.org/docs/user_guide/dsintro.html#series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J1GJqDVC4D"}],"urlSource":"https://pandas.pydata.org/docs/user_guide/dsintro.html#series","key":"D8YjZDvQct"},{"type":"text","value":"...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uwofbVAaEW"}],"identifier":"the-pandas-series","label":"The pandas Series...","html_id":"the-pandas-series","implicit":true,"key":"ZIXl77zTOw"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"...is essentially any one of the columns of our ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lDceqwRoSY"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yfHefvWK1I"},{"type":"text","value":". A ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hhstOIyjPV"},{"type":"inlineCode","value":"Series","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tBFR9jIHOM"},{"type":"text","value":" also includes the index column from the source ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ycqqr9z8mN"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uCIhgZLp5S"},{"type":"text","value":", in order to provide a label for each value in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qu4GRAhbJC"},{"type":"inlineCode","value":"Series","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eQRn7knW2E"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sQZW4kJoRd"}],"key":"LNzEzT4gd2"},{"type":"image","url":"/_preview/560/build/11420729a6837663b4a0827316c25077.svg","alt":"pandas Series","title":"Schematic of a pandas Series","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GAofzI7EAh","urlSource":"https://github.com/pandas-dev/pandas/raw/main/doc/source/_static/schemas/01_table_series.svg"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The pandas ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"O2ASglMUeS"},{"type":"inlineCode","value":"Series","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"tJycQ04TfU"},{"type":"text","value":" is a fast and capable 1-dimensional array of nearly any data type we could want, and it can behave very similarly to a NumPy ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"LeRohlSMJQ"},{"type":"inlineCode","value":"ndarray","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"uee9RdGhLJ"},{"type":"text","value":" or a Python ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"LmY0bUj947"},{"type":"inlineCode","value":"dict","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"aeYnOb3h4B"},{"type":"text","value":". You can take a look at any of the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"soOoBRhmZd"},{"type":"inlineCode","value":"Series","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VZ5Zp5aVYR"},{"type":"text","value":" that make up your ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"wMyOzJRYJC"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"GZJdkGtAy2"},{"type":"text","value":", either by using its column name and the Python ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"q8u9VxeEwR"},{"type":"inlineCode","value":"dict","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"YA0HJprcbR"},{"type":"text","value":" notation, or by using dot-shorthand with the column name:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"pEqfjDdcPl"}],"key":"xfxiMdVIsC"}],"key":"ngS9IjvGkl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"Nino34\"]","key":"H1Nbh6ZZNS"},{"type":"output","id":"UbLpVZd5VhZtV8jiHhEKw","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n              ...  \n2020-12-01    25.53\n2021-01-01    25.58\n2021-02-01    25.81\n2021-03-01    26.75\n2021-04-01    27.40\nName: Nino34, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"xPJSH3SmQU"}],"key":"tTrPp7WkVF"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"alert alert-block alert-info","children":[{"type":"strong","children":[{"type":"text","value":"Tip:","key":"Nn9IbFwu58"}],"key":"VKqlG9WV5Z"},{"type":"text","value":" You can also use the dot notation illustrated below to specify a column name, but this syntax is mostly provided for convenience. For the most part, this notation is interchangeable with the dictionary notation; however, if the column name is not a valid Python identifier (e.g., it starts with a number or space), you cannot use dot notation.","key":"HWmvrI6JkE"}],"key":"WJvyDkjbgg"}],"key":"qqGguKHB1D"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34","key":"YTwGjZQ3vO"},{"type":"output","id":"qIPcTP93NbAXq446BdT3R","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n              ...  \n2020-12-01    25.53\n2021-01-01    25.58\n2021-02-01    25.81\n2021-03-01    26.75\n2021-04-01    27.40\nName: Nino34, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"gwzeVsgG7i"}],"key":"rHDObHkaVK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Slicing and Dicing the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nq2ax9q3If"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e5V2dm3ck0"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NntRIdWq8P"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"L1cI2uUuM3"}],"identifier":"slicing-and-dicing-the-dataframe-and-series","label":"Slicing and Dicing the DataFrame and Series","html_id":"slicing-and-dicing-the-dataframe-and-series","implicit":true,"key":"mcydHytPZm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this section, we will expand on topics covered in the previous sections on this page. One of the most important concepts to learn about Pandas is that it allows you to ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wLRwtXSax3"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"access anything by its associated label","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mojRMN1t7a"}],"key":"wswouB10ov"}],"key":"zxmAlbwhvS"},{"type":"text","value":", regardless of data organization structure.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PDPqYKEVku"}],"key":"SN0ua2EaXn"}],"key":"ktYDU7qr99"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Indexing a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SSkY9A4aWJ"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tOAyvxkHfJ"}],"identifier":"indexing-a-series","label":"Indexing a Series","html_id":"indexing-a-series","implicit":true,"key":"O8pb7paFtj"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As a review of previous examples, we’ll start our next example by pulling a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"f5pkK5dREP"},{"type":"inlineCode","value":"Series","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"G8sUppevJ6"},{"type":"text","value":" out of our ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bmKgqVb9Oa"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pW7WvF1fH7"},{"type":"text","value":" using its column label.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tzWYFUeAxJ"}],"key":"fYM6UN5Wb4"}],"key":"bjrTF4PCqt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series = df[\"Nino34\"]\n\nnino34_series","key":"lDxdtNl2OT"},{"type":"output","id":"zeyGnMyaiNz2kDcPIHBNX","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n              ...  \n2020-12-01    25.53\n2021-01-01    25.58\n2021-02-01    25.81\n2021-03-01    26.75\n2021-04-01    27.40\nName: Nino34, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"f8qqQpneTX"}],"key":"rp470OWpkg"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can use syntax similar to that of NumPy ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"S2HfahZFlr"},{"type":"inlineCode","value":"ndarrays","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rnZRYIHFEm"},{"type":"text","value":" to index, select, and subset with Pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MKvzh5llbv"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pZYEy8PGwm"},{"type":"text","value":", as shown in this example:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gfX2jQJ348"}],"key":"RLB10zUFIo"}],"key":"qRtpKQ2HrH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series[3]","key":"x2eHixelLq"},{"type":"output","id":"GSEHQpln0Faf5Kqlk06ou","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_4135/737336773.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  nino34_series[3]\n"},{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"key":"wrQMkNGvOT"}],"key":"yVdQ0X4L5b"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can also use labels alongside Python dictionary syntax to perform the same operations:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tasddorc2B"}],"key":"lCZVjsy0sJ"}],"key":"G9HKBVEK0B"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series[\"1982-04-01\"]","key":"azHdKBRpTb"},{"type":"output","id":"TXypyRnprAVN4yeQxPkqw","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"key":"HYu8qbBujy"}],"key":"KmkgApA5ky"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can probably figure out some ways to extend these indexing methods, as shown in the following examples:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H8fgqp5GCL"}],"key":"KLvu1CCXvH"}],"key":"D5irtLxYYz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series[0:12]","key":"CrGSuM6Wim"},{"type":"output","id":"t5AjZhjbDGk1R1b71uTaK","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n1982-06-01    28.75\n1982-07-01    28.10\n1982-08-01    27.93\n1982-09-01    28.11\n1982-10-01    28.64\n1982-11-01    28.81\n1982-12-01    29.21\nName: Nino34, dtype: float64","content_type":"text/plain"}}}],"key":"cnJU9ZulfY"}],"key":"XlQopVTAVj"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-info","children":[{"type":"paragraph","children":[{"type":"text","value":"Info","key":"ekPwJMDswZ"}],"key":"G6BYfOY7PC"},{"type":"text","value":"Index-based slices are ","key":"ALB469SCvx"},{"type":"strong","children":[{"type":"text","value":"exclusive","key":"BSFkiBou2T"}],"key":"OGGXtT3ERR"},{"type":"text","value":" of the final value, similar to Python's usual indexing rules.","key":"SUoqTQfPk7"}],"key":"pFCJz73Rvh"}],"key":"FoIXIsPhII"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"However, there are many more ways to index a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mSSuRtKV2I"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lvbGYypSya"},{"type":"text","value":". The following example shows a powerful and useful indexing method:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CJH2UEENaX"}],"key":"B2iD2iUdx0"}],"key":"gNDvcfEKSH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series[\"1982-01-01\":\"1982-12-01\"]","key":"vvOxPxdWyH"},{"type":"output","id":"_PSdox0HEDQ6sINL9G5kX","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n1982-06-01    28.75\n1982-07-01    28.10\n1982-08-01    27.93\n1982-09-01    28.11\n1982-10-01    28.64\n1982-11-01    28.81\n1982-12-01    29.21\nName: Nino34, dtype: float64","content_type":"text/plain"}}}],"key":"LD12HqjqAE"}],"key":"aoq7iflD8G"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This is an example of label-based slicing. With label-based slicing, Pandas will automatically find a range of values based on the labels you specify.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pvVyFg2dai"}],"key":"YOEs9XXmZd"}],"key":"wDFpSRGaGk"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-info","children":[{"type":"paragraph","children":[{"type":"text","value":"Info","key":"Cp3r9aKrxq"}],"key":"EvHACMPBuC"},{"type":"text","value":"As opposed to index-based slices, label-based slices are ","key":"JmBNQ1LBrv"},{"type":"strong","children":[{"type":"text","value":"inclusive","key":"f8VpJiJGV3"}],"key":"xnBriJpMo3"},{"type":"text","value":" of the final value.","key":"NuewBuPCnA"}],"key":"X59fcONntP"}],"key":"iX76yzcFBC"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you already have some knowledge of xarray, you will quite likely know how to create ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XTQT3XLeIf"},{"type":"inlineCode","value":"slice","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gxjUuEBcHX"},{"type":"text","value":" objects by hand. This can also be used in pandas, as shown below.  If you are completely unfamiliar with xarray, it will be covered on a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tvcD1I5y54"},{"type":"link","url":"../xarray","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"later Pythia tutorial page","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fC4LichZLj"}],"urlSource":"../xarray","key":"fGg2sxyMXC"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nXkKhipZho"}],"key":"yDPaskFh6J"}],"key":"JSISVVMtDH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series[slice(\"1982-01-01\", \"1982-12-01\")]","key":"d7AKpLqTHz"},{"type":"output","id":"qndwOWtxRQjM54OsqUriJ","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n1982-06-01    28.75\n1982-07-01    28.10\n1982-08-01    27.93\n1982-09-01    28.11\n1982-10-01    28.64\n1982-11-01    28.81\n1982-12-01    29.21\nName: Nino34, dtype: float64","content_type":"text/plain"}}}],"key":"Yu9BquCtq6"}],"key":"o5m0thEP4t"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"B4ZwsZeDfx"},{"type":"inlineCode","value":".iloc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h16CBql0zF"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ie5OOJgk6n"},{"type":"inlineCode","value":".loc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qLdRC3sEdj"},{"type":"text","value":" to index","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jIz5uAn04M"}],"identifier":"using-iloc-and-loc-to-index","label":"Using .iloc and .loc to index","html_id":"using-iloc-and-loc-to-index","implicit":true,"key":"AehemDtYiE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this section, we introduce ways to access data that are preferred by Pandas over the methods listed above. When accessing by label, it is preferred to use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jfls89wa5I"},{"type":"inlineCode","value":".loc","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TlcagfD7Cx"},{"type":"text","value":" method, and when accessing by index, the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vPs0EyiBbk"},{"type":"inlineCode","value":".iloc","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BnzPjRiHCz"},{"type":"text","value":" method is preferred. These methods behave similarly to the notation introduced above, but provide more speed, security, and rigor in your value selection. Using these methods can also help you avoid ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SYwAf1qP8g"},{"type":"link","url":"https://pandas.pydata.org/docs/user_guide/indexing.html#returning-a-view-versus-a-copy","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"chained assignment warnings","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"W2W2K5b7tR"}],"urlSource":"https://pandas.pydata.org/docs/user_guide/indexing.html#returning-a-view-versus-a-copy","key":"ivAlpEUKnp"},{"type":"text","value":" generated by pandas.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CvBSu7DsSy"}],"key":"LFVf7WHkro"}],"key":"HStxoJ0xcl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series.iloc[3]","key":"slgEq165vz"},{"type":"output","id":"Brva0QmhAjBXfNz9GuOel","data":[{"output_type":"execute_result","execution_count":18,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"key":"c7XwWULUHH"}],"key":"okvCGHaERz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series.iloc[0:12]","key":"HjD3bHsITw"},{"type":"output","id":"_Sa9JLOSHu9l9bucGgQ4k","data":[{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n1982-06-01    28.75\n1982-07-01    28.10\n1982-08-01    27.93\n1982-09-01    28.11\n1982-10-01    28.64\n1982-11-01    28.81\n1982-12-01    29.21\nName: Nino34, dtype: float64","content_type":"text/plain"}}}],"key":"ysdswyJnrX"}],"key":"HmDFLfnrQH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series.loc[\"1982-04-01\"]","key":"oRwgP3xiHM"},{"type":"output","id":"kbovPhMva56zKSe-SilXw","data":[{"output_type":"execute_result","execution_count":20,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"key":"qPOHuIpyQA"}],"key":"sB8lGAdBHL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series.loc[\"1982-01-01\":\"1982-12-01\"]","key":"WdbxguClkC"},{"type":"output","id":"8UFDsTfqP-iMTv0abmxMr","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n1982-06-01    28.75\n1982-07-01    28.10\n1982-08-01    27.93\n1982-09-01    28.11\n1982-10-01    28.64\n1982-11-01    28.81\n1982-12-01    29.21\nName: Nino34, dtype: float64","content_type":"text/plain"}}}],"key":"G1QpOFi4X9"}],"key":"OTnS6T6yIx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Extending to the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ss1GvNuRnQ"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t0DNYnUuUO"}],"identifier":"extending-to-the-dataframe","label":"Extending to the DataFrame","html_id":"extending-to-the-dataframe","implicit":true,"key":"LLmSM0CSwx"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"These subsetting capabilities can also be used in a full ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wSOgn4INX8"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"R1SFSIIsuJ"},{"type":"text","value":"; however, if you use the same syntax, there are issues, as shown below:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VjfR3xRYLb"}],"key":"zJdky8ilcw"}],"key":"BJlcwcDefr"},{"type":"block","kind":"notebook-code","data":{"tags":["raises-exception"]},"children":[{"type":"code","lang":"python","executable":true,"value":"df[\"1982-01-01\"]","visibility":"show","key":"FDF4Kd2OGK"},{"type":"output","id":"KZ3Ott266qgckw4M8b4af","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pandas/core/indexes/base.py:3812\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3811\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m3812\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_engine\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3813\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/index.pyx:167\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/index.pyx:196\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/hashtable_class_helper.pxi:7088\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/hashtable_class_helper.pxi:7096\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[31mKeyError\u001b[39m: '1982-01-01'\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[22]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43m1982-01-01\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pandas/core/frame.py:4113\u001b[39m, in \u001b[36mDataFrame.__getitem__\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   4111\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.columns.nlevels > \u001b[32m1\u001b[39m:\n\u001b[32m   4112\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._getitem_multilevel(key)\n\u001b[32m-> \u001b[39m\u001b[32m4113\u001b[39m indexer = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   4114\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[32m   4115\u001b[39m     indexer = [indexer]\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pandas/core/indexes/base.py:3819\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3814\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[32m   3815\u001b[39m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc.Iterable)\n\u001b[32m   3816\u001b[39m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[32m   3817\u001b[39m     ):\n\u001b[32m   3818\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[32m-> \u001b[39m\u001b[32m3819\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01merr\u001b[39;00m\n\u001b[32m   3820\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[32m   3821\u001b[39m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[32m   3822\u001b[39m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[32m   3823\u001b[39m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[32m   3824\u001b[39m     \u001b[38;5;28mself\u001b[39m._check_indexing_error(key)\n\n\u001b[31mKeyError\u001b[39m: '1982-01-01'","ename":"KeyError","evalue":"'1982-01-01'"}],"visibility":"show","key":"UWJGSFdOvn"}],"visibility":"show","key":"En9uGNRB6F"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-danger","children":[{"type":"paragraph","children":[{"type":"text","value":"Danger","key":"fzMQSgSiq4"}],"key":"euUBzUJ05s"},{"type":"text","value":"Attempting to use ","key":"IV4v5UjM6l"},{"type":"inlineCode","value":"Series","key":"Hx6WUk8Pbn"},{"type":"text","value":" subsetting with a ","key":"T4Rx0LZdh9"},{"type":"inlineCode","value":"DataFrame","key":"rYzNyekQrC"},{"type":"text","value":" can crash your program. A proper way to subset a ","key":"PzmxutjANS"},{"type":"inlineCode","value":"DataFrame","key":"WFFyOxne6C"},{"type":"text","value":" is shown below.","key":"XyTtvU7wZX"}],"key":"AHrPC9FwVq"}],"key":"rF8nLGY4Gh"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"When indexing a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nHcs4bGFzz"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eJr5Ccnmsd"},{"type":"text","value":", pandas will not assume as readily the intention of your code. In this case, using a row label by itself will not work; ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CHLmJzjhyd"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xIAiSmkmZS"},{"type":"inlineCode","value":"DataFrames","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ph7MemjPty"},{"type":"text","value":", labels are used for identifying columns","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zRYaSgT7AG"}],"key":"LqBZKyUn8N"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sxVbqMfBxd"}],"key":"VjbNiXSV9L"}],"key":"MKXH4K77kt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"Nino34\"]","key":"cTf5aOWvRc"},{"type":"output","id":"QYpJqXtzCbfotFS0IL_7l","data":[{"output_type":"execute_result","execution_count":23,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n              ...  \n2020-12-01    25.53\n2021-01-01    25.58\n2021-02-01    25.81\n2021-03-01    26.75\n2021-04-01    27.40\nName: Nino34, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"kteHX9lLxW"}],"key":"rqTSn8DO3R"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As shown below, you also cannot subset columns in a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kgfEoGSJ8P"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KFMTlghe73"},{"type":"text","value":" using integer indices:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dzYqMbsr5q"}],"key":"lhMkdXk6sz"}],"key":"GsyTmX1Lec"},{"type":"block","kind":"notebook-code","data":{"tags":["raises-exception"]},"children":[{"type":"code","lang":"python","executable":true,"value":"df[0]","visibility":"show","key":"JlxoKy2Dk6"},{"type":"output","id":"Em3hFV13IMfDeWqUk1Vs8","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pandas/core/indexes/base.py:3812\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3811\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m3812\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_engine\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3813\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/index.pyx:167\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/index.pyx:196\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/hashtable_class_helper.pxi:7088\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/hashtable_class_helper.pxi:7096\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[31mKeyError\u001b[39m: 0\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[24]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[32;43m0\u001b[39;49m\u001b[43m]\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pandas/core/frame.py:4113\u001b[39m, in \u001b[36mDataFrame.__getitem__\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   4111\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.columns.nlevels > \u001b[32m1\u001b[39m:\n\u001b[32m   4112\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._getitem_multilevel(key)\n\u001b[32m-> \u001b[39m\u001b[32m4113\u001b[39m indexer = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   4114\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[32m   4115\u001b[39m     indexer = [indexer]\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/pythia-book-dev/lib/python3.14/site-packages/pandas/core/indexes/base.py:3819\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3814\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[32m   3815\u001b[39m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc.Iterable)\n\u001b[32m   3816\u001b[39m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[32m   3817\u001b[39m     ):\n\u001b[32m   3818\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[32m-> \u001b[39m\u001b[32m3819\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01merr\u001b[39;00m\n\u001b[32m   3820\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[32m   3821\u001b[39m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[32m   3822\u001b[39m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[32m   3823\u001b[39m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[32m   3824\u001b[39m     \u001b[38;5;28mself\u001b[39m._check_indexing_error(key)\n\n\u001b[31mKeyError\u001b[39m: 0","ename":"KeyError","evalue":"0"}],"visibility":"show","key":"SPYi1Sed0F"}],"visibility":"show","key":"FM5sS8aRrD"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"From earlier examples, we know that we can use an index or label with a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZC1GHY4ASl"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"czeQmXGTdM"},{"type":"text","value":" to pull out a column as a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"E8OQWklMU9"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WboU7CPZQO"},{"type":"text","value":", and we know that we can use an index or label with a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Mf1YcD1128"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Htn1c1oTW8"},{"type":"text","value":" to pull out a single value.  Therefore, by chaining brackets, we can pull any individual data value out of the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xYELNnhxt3"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zf4t4BCKm0"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dt5y08VvM7"}],"key":"AWfqvjaoEO"}],"key":"Sxv5zRTEom"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"df[\"Nino34\"][\"1982-04-01\"]","visibility":"show","key":"wXkNruLoZX"},{"type":"output","id":"OnFfgKhnBvF_IX61wCiwb","data":[{"output_type":"execute_result","execution_count":25,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"visibility":"show","key":"YGeo7q8s2c"}],"visibility":"show","key":"fxOEFhEuSA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"Nino34\"][3]","key":"db2Qhor0us"},{"type":"output","id":"ZOslAtREPvxlAaslLy-Kw","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_4135/541596450.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  df[\"Nino34\"][3]\n"},{"output_type":"execute_result","execution_count":26,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"key":"Hl9sMZ2jFx"}],"key":"SIxEk6kUmq"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"However, subsetting data using this chained-bracket technique is not preferred by Pandas. As described above, Pandas prefers us to use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MxFykHCwXT"},{"type":"inlineCode","value":".loc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mgiZn59g1z"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gYTkTw1oId"},{"type":"inlineCode","value":".iloc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wNqK68oy0p"},{"type":"text","value":" methods for subsetting.  In addition, these methods provide a clearer, more efficient way to extract specific data from a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jcWiieOBcN"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ofLFrCweme"},{"type":"text","value":", as illustrated below:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yTCHAXe6SH"}],"key":"NoezRwXdpw"}],"key":"N6nnyGYWwD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.loc[\"1982-04-01\", \"Nino34\"]","key":"p7Sx9hYMEn"},{"type":"output","id":"NNtvdf3UvFe-orvr4-gKo","data":[{"output_type":"execute_result","execution_count":27,"metadata":{},"data":{"text/plain":{"content":"np.float64(28.02)","content_type":"text/plain"}}}],"key":"WQKSC7lRT3"}],"key":"Eg05Uire78"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-info","children":[{"type":"paragraph","children":[{"type":"text","value":"Info","key":"JHELXR3W9r"}],"key":"ZlGTxrHWgh"},{"type":"text","value":"When using this syntax to pull individual data values from a DataFrame, make sure to list the row first, and then the column.","key":"Jz817jR6Pg"}],"key":"Yh63ltgKkd"}],"key":"uG6E5wJTzv"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rLOIAKdqnR"},{"type":"inlineCode","value":".loc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KD1hWUoSfR"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZHPLjueJQb"},{"type":"inlineCode","value":".iloc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YDzK82nxnt"},{"type":"text","value":" methods also allow us to pull entire rows out of a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cy0r5QyEzR"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Dq5eIpnmF6"},{"type":"text","value":", as shown in these examples:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uHAkbHWwOS"}],"key":"wq1KAEcnVu"}],"key":"oo0fncc9Jc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.loc[\"1982-04-01\"]","key":"SybJPrlVI9"},{"type":"output","id":"Fir7YDK9TRpH8Zwc1VnJe","data":[{"output_type":"execute_result","execution_count":28,"metadata":{},"data":{"text/plain":{"content":"Nino12        24.50\nNino12anom    -0.97\nNino3         27.68\nNino3anom      0.18\nNino4         28.92\nNino4anom      0.42\nNino34        28.02\nNino34anom     0.24\nName: 1982-04-01 00:00:00, dtype: float64","content_type":"text/plain"}}}],"key":"ZWi260wrgW"}],"key":"ng4zf2n9ZB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.loc[\"1982-01-01\":\"1982-12-01\"]","key":"UwCe5eJo8V"},{"type":"output","id":"StzUixQXcQUHAYVQBGIjS","data":[{"output_type":"execute_result","execution_count":29,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   26.72   \n1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   26.70   \n1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   27.20   \n1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   28.02   \n1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   28.54   \n1982-06-01   22.89        0.07  27.46       1.03  29.76       0.92   28.75   \n1982-07-01   22.47        0.87  26.44       0.82  29.38       0.58   28.10   \n1982-08-01   21.75        1.10  26.15       1.16  29.04       0.36   27.93   \n1982-09-01   21.80        1.44  26.52       1.67  29.16       0.47   28.11   \n1982-10-01   22.94        2.12  27.11       2.19  29.38       0.72   28.64   \n1982-11-01   24.59        3.00  27.62       2.64  29.23       0.60   28.81   \n1982-12-01   26.13        3.34  28.39       3.25  29.15       0.66   29.21   \n\n            Nino34anom  \ndatetime                \n1982-01-01        0.15  \n1982-02-01       -0.02  \n1982-03-01       -0.02  \n1982-04-01        0.24  \n1982-05-01        0.69  \n1982-06-01        1.10  \n1982-07-01        0.88  \n1982-08-01        1.11  \n1982-09-01        1.39  \n1982-10-01        1.95  \n1982-11-01        2.16  \n1982-12-01        2.64  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>1982-02-01</th>\n      <td>25.49</td>\n      <td>-0.58</td>\n      <td>26.38</td>\n      <td>0.01</td>\n      <td>28.21</td>\n      <td>0.11</td>\n      <td>26.70</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-03-01</th>\n      <td>25.21</td>\n      <td>-1.31</td>\n      <td>26.98</td>\n      <td>-0.16</td>\n      <td>28.41</td>\n      <td>0.22</td>\n      <td>27.20</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-04-01</th>\n      <td>24.50</td>\n      <td>-0.97</td>\n      <td>27.68</td>\n      <td>0.18</td>\n      <td>28.92</td>\n      <td>0.42</td>\n      <td>28.02</td>\n      <td>0.24</td>\n    </tr>\n    <tr>\n      <th>1982-05-01</th>\n      <td>23.97</td>\n      <td>-0.23</td>\n      <td>27.79</td>\n      <td>0.71</td>\n      <td>29.49</td>\n      <td>0.70</td>\n      <td>28.54</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>1982-06-01</th>\n      <td>22.89</td>\n      <td>0.07</td>\n      <td>27.46</td>\n      <td>1.03</td>\n      <td>29.76</td>\n      <td>0.92</td>\n      <td>28.75</td>\n      <td>1.10</td>\n    </tr>\n    <tr>\n      <th>1982-07-01</th>\n      <td>22.47</td>\n      <td>0.87</td>\n      <td>26.44</td>\n      <td>0.82</td>\n      <td>29.38</td>\n      <td>0.58</td>\n      <td>28.10</td>\n      <td>0.88</td>\n    </tr>\n    <tr>\n      <th>1982-08-01</th>\n      <td>21.75</td>\n      <td>1.10</td>\n      <td>26.15</td>\n      <td>1.16</td>\n      <td>29.04</td>\n      <td>0.36</td>\n      <td>27.93</td>\n      <td>1.11</td>\n    </tr>\n    <tr>\n      <th>1982-09-01</th>\n      <td>21.80</td>\n      <td>1.44</td>\n      <td>26.52</td>\n      <td>1.67</td>\n      <td>29.16</td>\n      <td>0.47</td>\n      <td>28.11</td>\n      <td>1.39</td>\n    </tr>\n    <tr>\n      <th>1982-10-01</th>\n      <td>22.94</td>\n      <td>2.12</td>\n      <td>27.11</td>\n      <td>2.19</td>\n      <td>29.38</td>\n      <td>0.72</td>\n      <td>28.64</td>\n      <td>1.95</td>\n    </tr>\n    <tr>\n      <th>1982-11-01</th>\n      <td>24.59</td>\n      <td>3.00</td>\n      <td>27.62</td>\n      <td>2.64</td>\n      <td>29.23</td>\n      <td>0.60</td>\n      <td>28.81</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>1982-12-01</th>\n      <td>26.13</td>\n      <td>3.34</td>\n      <td>28.39</td>\n      <td>3.25</td>\n      <td>29.15</td>\n      <td>0.66</td>\n      <td>29.21</td>\n      <td>2.64</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"NKZgGmJ7vr"}],"key":"YzLgg8Zb57"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.iloc[3]","key":"sldL3jeX0T"},{"type":"output","id":"vuO3oF_ZalQ8_iXMK10UO","data":[{"output_type":"execute_result","execution_count":30,"metadata":{},"data":{"text/plain":{"content":"Nino12        24.50\nNino12anom    -0.97\nNino3         27.68\nNino3anom      0.18\nNino4         28.92\nNino4anom      0.42\nNino34        28.02\nNino34anom     0.24\nName: 1982-04-01 00:00:00, dtype: float64","content_type":"text/plain"}}}],"key":"LNh1xBJ6WG"}],"key":"NXNFfCtXTw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.iloc[0:12]","key":"mylXgsyKnf"},{"type":"output","id":"0OBeZA86p9DcAexxJP8dd","data":[{"output_type":"execute_result","execution_count":31,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   26.72   \n1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   26.70   \n1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   27.20   \n1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   28.02   \n1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   28.54   \n1982-06-01   22.89        0.07  27.46       1.03  29.76       0.92   28.75   \n1982-07-01   22.47        0.87  26.44       0.82  29.38       0.58   28.10   \n1982-08-01   21.75        1.10  26.15       1.16  29.04       0.36   27.93   \n1982-09-01   21.80        1.44  26.52       1.67  29.16       0.47   28.11   \n1982-10-01   22.94        2.12  27.11       2.19  29.38       0.72   28.64   \n1982-11-01   24.59        3.00  27.62       2.64  29.23       0.60   28.81   \n1982-12-01   26.13        3.34  28.39       3.25  29.15       0.66   29.21   \n\n            Nino34anom  \ndatetime                \n1982-01-01        0.15  \n1982-02-01       -0.02  \n1982-03-01       -0.02  \n1982-04-01        0.24  \n1982-05-01        0.69  \n1982-06-01        1.10  \n1982-07-01        0.88  \n1982-08-01        1.11  \n1982-09-01        1.39  \n1982-10-01        1.95  \n1982-11-01        2.16  \n1982-12-01        2.64  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>1982-02-01</th>\n      <td>25.49</td>\n      <td>-0.58</td>\n      <td>26.38</td>\n      <td>0.01</td>\n      <td>28.21</td>\n      <td>0.11</td>\n      <td>26.70</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-03-01</th>\n      <td>25.21</td>\n      <td>-1.31</td>\n      <td>26.98</td>\n      <td>-0.16</td>\n      <td>28.41</td>\n      <td>0.22</td>\n      <td>27.20</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-04-01</th>\n      <td>24.50</td>\n      <td>-0.97</td>\n      <td>27.68</td>\n      <td>0.18</td>\n      <td>28.92</td>\n      <td>0.42</td>\n      <td>28.02</td>\n      <td>0.24</td>\n    </tr>\n    <tr>\n      <th>1982-05-01</th>\n      <td>23.97</td>\n      <td>-0.23</td>\n      <td>27.79</td>\n      <td>0.71</td>\n      <td>29.49</td>\n      <td>0.70</td>\n      <td>28.54</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>1982-06-01</th>\n      <td>22.89</td>\n      <td>0.07</td>\n      <td>27.46</td>\n      <td>1.03</td>\n      <td>29.76</td>\n      <td>0.92</td>\n      <td>28.75</td>\n      <td>1.10</td>\n    </tr>\n    <tr>\n      <th>1982-07-01</th>\n      <td>22.47</td>\n      <td>0.87</td>\n      <td>26.44</td>\n      <td>0.82</td>\n      <td>29.38</td>\n      <td>0.58</td>\n      <td>28.10</td>\n      <td>0.88</td>\n    </tr>\n    <tr>\n      <th>1982-08-01</th>\n      <td>21.75</td>\n      <td>1.10</td>\n      <td>26.15</td>\n      <td>1.16</td>\n      <td>29.04</td>\n      <td>0.36</td>\n      <td>27.93</td>\n      <td>1.11</td>\n    </tr>\n    <tr>\n      <th>1982-09-01</th>\n      <td>21.80</td>\n      <td>1.44</td>\n      <td>26.52</td>\n      <td>1.67</td>\n      <td>29.16</td>\n      <td>0.47</td>\n      <td>28.11</td>\n      <td>1.39</td>\n    </tr>\n    <tr>\n      <th>1982-10-01</th>\n      <td>22.94</td>\n      <td>2.12</td>\n      <td>27.11</td>\n      <td>2.19</td>\n      <td>29.38</td>\n      <td>0.72</td>\n      <td>28.64</td>\n      <td>1.95</td>\n    </tr>\n    <tr>\n      <th>1982-11-01</th>\n      <td>24.59</td>\n      <td>3.00</td>\n      <td>27.62</td>\n      <td>2.64</td>\n      <td>29.23</td>\n      <td>0.60</td>\n      <td>28.81</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>1982-12-01</th>\n      <td>26.13</td>\n      <td>3.34</td>\n      <td>28.39</td>\n      <td>3.25</td>\n      <td>29.15</td>\n      <td>0.66</td>\n      <td>29.21</td>\n      <td>2.64</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"hvFVS3sThn"}],"key":"JOLOS6cQhV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the next example, we illustrate how you can use slices of rows and lists of columns to create a smaller ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lrPr2266DA"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EzAC1JhYvU"},{"type":"text","value":" out of an existing ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rotcLzTP2o"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sdFlDPlJXm"},{"type":"text","value":":","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OggYq9ORZF"}],"key":"daXjBJSrOA"}],"key":"hVbbRkOexl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.loc[\n    \"1982-01-01\":\"1982-12-01\",  # slice of rows\n    [\"Nino12\", \"Nino3\", \"Nino4\", \"Nino34\"],  # list of columns\n]","key":"BYup6u5cao"},{"type":"output","id":"piqqmysVbwHTiX6qjT5oP","data":[{"output_type":"execute_result","execution_count":32,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino3  Nino4  Nino34\ndatetime                                \n1982-01-01   24.29  25.87  28.30   26.72\n1982-02-01   25.49  26.38  28.21   26.70\n1982-03-01   25.21  26.98  28.41   27.20\n1982-04-01   24.50  27.68  28.92   28.02\n1982-05-01   23.97  27.79  29.49   28.54\n1982-06-01   22.89  27.46  29.76   28.75\n1982-07-01   22.47  26.44  29.38   28.10\n1982-08-01   21.75  26.15  29.04   27.93\n1982-09-01   21.80  26.52  29.16   28.11\n1982-10-01   22.94  27.11  29.38   28.64\n1982-11-01   24.59  27.62  29.23   28.81\n1982-12-01   26.13  28.39  29.15   29.21","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino3</th>\n      <th>Nino4</th>\n      <th>Nino34</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>25.87</td>\n      <td>28.30</td>\n      <td>26.72</td>\n    </tr>\n    <tr>\n      <th>1982-02-01</th>\n      <td>25.49</td>\n      <td>26.38</td>\n      <td>28.21</td>\n      <td>26.70</td>\n    </tr>\n    <tr>\n      <th>1982-03-01</th>\n      <td>25.21</td>\n      <td>26.98</td>\n      <td>28.41</td>\n      <td>27.20</td>\n    </tr>\n    <tr>\n      <th>1982-04-01</th>\n      <td>24.50</td>\n      <td>27.68</td>\n      <td>28.92</td>\n      <td>28.02</td>\n    </tr>\n    <tr>\n      <th>1982-05-01</th>\n      <td>23.97</td>\n      <td>27.79</td>\n      <td>29.49</td>\n      <td>28.54</td>\n    </tr>\n    <tr>\n      <th>1982-06-01</th>\n      <td>22.89</td>\n      <td>27.46</td>\n      <td>29.76</td>\n      <td>28.75</td>\n    </tr>\n    <tr>\n      <th>1982-07-01</th>\n      <td>22.47</td>\n      <td>26.44</td>\n      <td>29.38</td>\n      <td>28.10</td>\n    </tr>\n    <tr>\n      <th>1982-08-01</th>\n      <td>21.75</td>\n      <td>26.15</td>\n      <td>29.04</td>\n      <td>27.93</td>\n    </tr>\n    <tr>\n      <th>1982-09-01</th>\n      <td>21.80</td>\n      <td>26.52</td>\n      <td>29.16</td>\n      <td>28.11</td>\n    </tr>\n    <tr>\n      <th>1982-10-01</th>\n      <td>22.94</td>\n      <td>27.11</td>\n      <td>29.38</td>\n      <td>28.64</td>\n    </tr>\n    <tr>\n      <th>1982-11-01</th>\n      <td>24.59</td>\n      <td>27.62</td>\n      <td>29.23</td>\n      <td>28.81</td>\n    </tr>\n    <tr>\n      <th>1982-12-01</th>\n      <td>26.13</td>\n      <td>28.39</td>\n      <td>29.15</td>\n      <td>29.21</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"UgwKtUnux4"}],"key":"xgHQB1OyDQ"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-info","children":[{"type":"paragraph","children":[{"type":"text","value":"Info","key":"oSOZVqZDkI"}],"key":"yWNnHF8zyJ"},{"type":"text","value":"There are certain limitations to these subsetting techniques. For more information on these limitations, as well as a comparison of ","key":"IMJEwzRHoq"},{"type":"inlineCode","value":"DataFrame","key":"QKqwRHTz4l"},{"type":"text","value":" and ","key":"hocZWeEjar"},{"type":"inlineCode","value":"Series","key":"VQcUOWFT81"},{"type":"text","value":" indexing methods, see the ","key":"JqmDX634dl"},{"type":"link","url":"https://pandas.pydata.org/docs/user_guide/indexing.html","children":[{"type":"text","value":"Pandas indexing documentation.","key":"hnMdDWrAH9"}],"urlSource":"https://pandas.pydata.org/docs/user_guide/indexing.html","key":"xDlK22VnIO"}],"key":"RvwlvKLId2"}],"key":"CrYf06vBLl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Exploratory Data Analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MzMKDYhYl7"}],"identifier":"exploratory-data-analysis","label":"Exploratory Data Analysis","html_id":"exploratory-data-analysis","implicit":true,"key":"MEhg2V3j2D"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Get a Quick Look at the Beginning/End of your ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QHkiiJ8ZLq"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WB1GVl4c2H"}],"identifier":"get-a-quick-look-at-the-beginning-end-of-your-dataframe","label":"Get a Quick Look at the Beginning/End of your DataFrame","html_id":"get-a-quick-look-at-the-beginning-end-of-your-dataframe","implicit":true,"key":"VWaWvMtM4e"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Pandas also gives you a few shortcuts to quickly investigate entire ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"gfDUaFsLCd"},{"type":"inlineCode","value":"DataFrames","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ccJTeFFdJj"},{"type":"text","value":". The ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"qfS9xWTAZ4"},{"type":"inlineCode","value":"head","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"QYklSnTbUM"},{"type":"text","value":" method shows the first five rows of a ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"F5Cy2DVB8i"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"CM4OFFUr2j"},{"type":"text","value":", and the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Xv3I8ZQMMU"},{"type":"inlineCode","value":"tail","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"z8up68YVuD"},{"type":"text","value":" method shows the last five rows of a ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"QAsDbBJerh"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"p5UhH9ptfq"},{"type":"text","value":".","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"h7V9zyWCJ5"}],"key":"R38UEW8IFk"}],"key":"CW9HTyAV0t"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.head()","key":"Um1FLyxOez"},{"type":"output","id":"z8GOzRhn9o_2hwKi9x6_U","data":[{"output_type":"execute_result","execution_count":33,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   26.72   \n1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   26.70   \n1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   27.20   \n1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   28.02   \n1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   28.54   \n\n            Nino34anom  \ndatetime                \n1982-01-01        0.15  \n1982-02-01       -0.02  \n1982-03-01       -0.02  \n1982-04-01        0.24  \n1982-05-01        0.69  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>1982-02-01</th>\n      <td>25.49</td>\n      <td>-0.58</td>\n      <td>26.38</td>\n      <td>0.01</td>\n      <td>28.21</td>\n      <td>0.11</td>\n      <td>26.70</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-03-01</th>\n      <td>25.21</td>\n      <td>-1.31</td>\n      <td>26.98</td>\n      <td>-0.16</td>\n      <td>28.41</td>\n      <td>0.22</td>\n      <td>27.20</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1982-04-01</th>\n      <td>24.50</td>\n      <td>-0.97</td>\n      <td>27.68</td>\n      <td>0.18</td>\n      <td>28.92</td>\n      <td>0.42</td>\n      <td>28.02</td>\n      <td>0.24</td>\n    </tr>\n    <tr>\n      <th>1982-05-01</th>\n      <td>23.97</td>\n      <td>-0.23</td>\n      <td>27.79</td>\n      <td>0.71</td>\n      <td>29.49</td>\n      <td>0.70</td>\n      <td>28.54</td>\n      <td>0.69</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"KAbsRzuuKk"}],"key":"AGH704Vp5v"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.tail()","key":"vDFitxv4oX"},{"type":"output","id":"QYMlIVdfNPta1NrT0hmbA","data":[{"output_type":"execute_result","execution_count":34,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n2020-12-01   22.16       -0.60  24.38      -0.83  27.65      -0.95   25.53   \n2021-01-01   23.89       -0.64  25.06      -0.55  27.10      -1.25   25.58   \n2021-02-01   25.55       -0.66  25.80      -0.57  27.20      -1.00   25.81   \n2021-03-01   26.48       -0.26  26.80      -0.39  27.79      -0.55   26.75   \n2021-04-01   24.89       -0.80  26.96      -0.65  28.47      -0.21   27.40   \n\n            Nino34anom  \ndatetime                \n2020-12-01       -1.12  \n2021-01-01       -0.99  \n2021-02-01       -0.92  \n2021-03-01       -0.51  \n2021-04-01       -0.49  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020-12-01</th>\n      <td>22.16</td>\n      <td>-0.60</td>\n      <td>24.38</td>\n      <td>-0.83</td>\n      <td>27.65</td>\n      <td>-0.95</td>\n      <td>25.53</td>\n      <td>-1.12</td>\n    </tr>\n    <tr>\n      <th>2021-01-01</th>\n      <td>23.89</td>\n      <td>-0.64</td>\n      <td>25.06</td>\n      <td>-0.55</td>\n      <td>27.10</td>\n      <td>-1.25</td>\n      <td>25.58</td>\n      <td>-0.99</td>\n    </tr>\n    <tr>\n      <th>2021-02-01</th>\n      <td>25.55</td>\n      <td>-0.66</td>\n      <td>25.80</td>\n      <td>-0.57</td>\n      <td>27.20</td>\n      <td>-1.00</td>\n      <td>25.81</td>\n      <td>-0.92</td>\n    </tr>\n    <tr>\n      <th>2021-03-01</th>\n      <td>26.48</td>\n      <td>-0.26</td>\n      <td>26.80</td>\n      <td>-0.39</td>\n      <td>27.79</td>\n      <td>-0.55</td>\n      <td>26.75</td>\n      <td>-0.51</td>\n    </tr>\n    <tr>\n      <th>2021-04-01</th>\n      <td>24.89</td>\n      <td>-0.80</td>\n      <td>26.96</td>\n      <td>-0.65</td>\n      <td>28.47</td>\n      <td>-0.21</td>\n      <td>27.40</td>\n      <td>-0.49</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"jCzBdeY6gw"}],"key":"GLel5yn8Zf"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Quick Plots of Your Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Q1nfhOwoIa"}],"identifier":"quick-plots-of-your-data","label":"Quick Plots of Your Data","html_id":"quick-plots-of-your-data","implicit":true,"key":"dVncq5WoND"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"A good way to explore your data is by making a simple plot. Pandas contains its own ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"InsW3VgEYh"},{"type":"inlineCode","value":"plot","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"q39p094cW9"},{"type":"text","value":" method; this allows us to plot Pandas series without needing ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ofwTa1gUWL"},{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Z7IAoGeFao"},{"type":"text","value":".  In this example, we plot the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"qadbtlNFFZ"},{"type":"inlineCode","value":"Nino34","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Pb5xw7D98i"},{"type":"text","value":" series of our ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zxvjK6jf90"},{"type":"inlineCode","value":"df","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EZ9nWq44JK"},{"type":"text","value":" ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HLa3S6uXz8"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"oMDw2MT2QH"},{"type":"text","value":" in this way:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"jRsXNaUFiM"}],"key":"EpXYTWLgYP"}],"key":"pedSbLGxAh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34.plot();","key":"XcQYs1dzDG"},{"type":"output","id":"muyMrUFLmyPml5lVWcAOk","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"40b3111b4cd35375fdbd655f3fd005c8","path":"/_preview/560/build/40b3111b4cd35375fdbd655f3fd005c8.png"}}}],"key":"qoYJQ61iba"}],"key":"WhcThbHl5o"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Before, we called ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Uv0c55fap8"},{"type":"inlineCode","value":".plot()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VJS6nBEENH"},{"type":"text","value":", which generated a single line plot. Line plots can be helpful for understanding some types of data, but there are other types of data that can be better understood with different plot types. For example, if your data values form a distribution, you can better understand them using a histogram plot.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KQljwL1H2h"}],"key":"DwD4OHjrsI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The code for plotting histogram data differs in two ways from the code above for the line plot. First, two series are being used from the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PsG2CZ1yaL"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"x4x2dC2E9p"},{"type":"text","value":" instead of one.  Second, after calling the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OhL0217xTT"},{"type":"inlineCode","value":"plot","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MJZEKrFVVV"},{"type":"text","value":" method, we call an additional method called ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Tl4MSiBbTd"},{"type":"inlineCode","value":"hist","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Q9sPXGpOVj"},{"type":"text","value":", which converts the plot into a histogram.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"d5MXk98LNK"}],"key":"GqKuOryf9h"}],"key":"SN5LxQGAUM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df[['Nino12', 'Nino34']].plot.hist();","key":"oUnyVJekXW"},{"type":"output","id":"iNlewW_zjf_C235NhaQLF","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"a55a4e92a3192923fc03546174769e45","path":"/_preview/560/build/a55a4e92a3192923fc03546174769e45.png"}}}],"key":"AsEv8UwQM6"}],"key":"s2K4LR6gP6"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The histogram plot helped us better understand our data; there are clear differences in the distributions. To even better understand this type of data, it may also be helpful to create a box plot. This can be done using the same line of code, with one change: we call the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dRLaN6WNvL"},{"type":"inlineCode","value":"box","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gCnaVLACoa"},{"type":"text","value":" method instead of ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WBEENdcwXT"},{"type":"inlineCode","value":"hist","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CdvGDYMFy5"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nvugt5F3BF"}],"key":"RxUGLB9kaZ"}],"key":"z1d05emVzZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df[['Nino12', 'Nino34']].plot.box();","key":"am8lHozvb8"},{"type":"output","id":"w64rNLV1pSB8RDQ_YtI7Z","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f9debbe55f2e99139454857010ea780e","path":"/_preview/560/build/f9debbe55f2e99139454857010ea780e.png"}}}],"key":"U53rVAWyH2"}],"key":"BA07VyVBid"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Just like the histogram plot, this box plot indicates a clear difference in the distributions. Using multiple types of plot in this way can be useful for verifying large datasets. The pandas plotting methods are capable of creating many different types of plots. To see how to use the plotting methods to generate each type of plot, please review the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fC8ulrgDH0"},{"type":"link","url":"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"pandas plot documentation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JawBHLfm44"}],"urlSource":"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html","key":"ygwjcneA4B"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Iq4MOzkxfm"}],"key":"ggvPrKu4LH"}],"key":"Xf93peZP9v"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Customize your Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yhBtpSGpV2"}],"identifier":"customize-your-plot","label":"Customize your Plot","html_id":"customize-your-plot","implicit":true,"key":"lOgQriCtLU"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The pandas plotting methods are, in fact, wrappers for similar methods in matplotlib. This means that you can customize pandas plots by including keyword arguments to the plotting methods.  These keyword arguments, for the most part, are equivalent to their matplotlib counterparts.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"WuvHemfv10"}],"key":"HQU400noIn"}],"key":"ZAkxnCblls"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34.plot(\n    color='black',\n    linewidth=2,\n    xlabel='Year',\n    ylabel='ENSO34 Index (degC)',\n    figsize=(8, 6),\n);","key":"wquJfI4EO7"},{"type":"output","id":"ecUIy40zJyK6V1DEKCRQU","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 800x600 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e7e8a386e8b6f81d3b4e49099cf34428","path":"/_preview/560/build/e7e8a386e8b6f81d3b4e49099cf34428.png"}}}],"key":"qmgH4KFqTm"}],"key":"A7M1bOmlwx"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Although plotting data can provide a clear visual picture of data values, sometimes a more quantitative look at data is warranted. As elaborated on in the next section, this can be achieved using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ShBZk8PoTt"},{"type":"inlineCode","value":"describe","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p7CaYQQkbk"},{"type":"text","value":" method.  The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R3HAvlt3ny"},{"type":"inlineCode","value":"describe","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DkCaVvlROJ"},{"type":"text","value":" method is called on the entire ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RoZagbnMls"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MAMlJ6iet1"},{"type":"text","value":", and returns various summarized statistics for each column in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vqIhRJHkXh"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zhz76QGYrK"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fqsDINVJRa"}],"key":"iOuFUpH6ji"},{"type":"heading","depth":3,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Basic Statistics","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YGVqDgILPK"}],"identifier":"basic-statistics","label":"Basic Statistics","html_id":"basic-statistics","implicit":true,"key":"jH7v2k99sD"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"We can garner statistics for a ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"go2yS4bOC2"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"RKdFXbKHYI"},{"type":"text","value":" by using the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"IpzimDkxad"},{"type":"inlineCode","value":"describe","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"RyT4QrxC5R"},{"type":"text","value":" method. When this method is called on a ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"s7BG5nDFsP"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sPuCRLPCyN"},{"type":"text","value":", a set of statistics is returned in tabular format.  The columns match those of the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"UXGE4hKLZ9"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yUTfu4i7yE"},{"type":"text","value":", and the rows indicate different statistics, such as minimum.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"o8bwoQTfXv"}],"key":"PjgioKlY3u"}],"key":"zu2wcVA9yZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.describe()","key":"CeZE4FZPmX"},{"type":"output","id":"UjgowUhOxpcVYYx8SGIYc","data":[{"output_type":"execute_result","execution_count":39,"metadata":{},"data":{"text/plain":{"content":"           Nino12  Nino12anom       Nino3   Nino3anom       Nino4   Nino4anom  \\\ncount  472.000000  472.000000  472.000000  472.000000  472.000000  472.000000   \nmean    23.209619    0.059725   25.936568    0.039428   28.625064    0.063814   \nstd      2.431522    1.157590    1.349621    0.965464    0.755422    0.709401   \nmin     18.570000   -2.100000   23.030000   -2.070000   26.430000   -1.870000   \n25%     21.152500   -0.712500   24.850000   -0.600000   28.140000   -0.430000   \n50%     22.980000   -0.160000   25.885000   -0.115000   28.760000    0.205000   \n75%     25.322500    0.515000   26.962500    0.512500   29.190000    0.630000   \nmax     29.150000    4.620000   29.140000    3.620000   30.300000    1.670000   \n\n           Nino34  Nino34anom  \ncount  472.000000  472.000000  \nmean    27.076780    0.034894  \nstd      1.063004    0.947936  \nmin     24.270000   -2.380000  \n25%     26.330000   -0.572500  \n50%     27.100000    0.015000  \n75%     27.792500    0.565000  \nmax     29.600000    2.950000  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>472.000000</td>\n      <td>472.000000</td>\n      <td>472.000000</td>\n      <td>472.000000</td>\n      <td>472.000000</td>\n      <td>472.000000</td>\n      <td>472.000000</td>\n      <td>472.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>23.209619</td>\n      <td>0.059725</td>\n      <td>25.936568</td>\n      <td>0.039428</td>\n      <td>28.625064</td>\n      <td>0.063814</td>\n      <td>27.076780</td>\n      <td>0.034894</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.431522</td>\n      <td>1.157590</td>\n      <td>1.349621</td>\n      <td>0.965464</td>\n      <td>0.755422</td>\n      <td>0.709401</td>\n      <td>1.063004</td>\n      <td>0.947936</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>18.570000</td>\n      <td>-2.100000</td>\n      <td>23.030000</td>\n      <td>-2.070000</td>\n      <td>26.430000</td>\n      <td>-1.870000</td>\n      <td>24.270000</td>\n      <td>-2.380000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>21.152500</td>\n      <td>-0.712500</td>\n      <td>24.850000</td>\n      <td>-0.600000</td>\n      <td>28.140000</td>\n      <td>-0.430000</td>\n      <td>26.330000</td>\n      <td>-0.572500</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>22.980000</td>\n      <td>-0.160000</td>\n      <td>25.885000</td>\n      <td>-0.115000</td>\n      <td>28.760000</td>\n      <td>0.205000</td>\n      <td>27.100000</td>\n      <td>0.015000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>25.322500</td>\n      <td>0.515000</td>\n      <td>26.962500</td>\n      <td>0.512500</td>\n      <td>29.190000</td>\n      <td>0.630000</td>\n      <td>27.792500</td>\n      <td>0.565000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>29.150000</td>\n      <td>4.620000</td>\n      <td>29.140000</td>\n      <td>3.620000</td>\n      <td>30.300000</td>\n      <td>1.670000</td>\n      <td>29.600000</td>\n      <td>2.950000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"fI2Wr4jIaA"}],"key":"h805Bx00RZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can also view specific statistics using corresponding methods. In this example, we look at the mean values in the entire ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DCrqsbgLsT"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bG7tEtnNce"},{"type":"text","value":", using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BkeNUKF5uI"},{"type":"inlineCode","value":"mean","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r8US2EGFKN"},{"type":"text","value":" method.  When such methods are called on the entire ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p0jhkcz5hq"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Vw73RFSPXE"},{"type":"text","value":", a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iLzLwQRGOD"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sfY9yrItXS"},{"type":"text","value":" is returned. The indices of this ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oXFhF5KXvw"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wpIQ83l1XZ"},{"type":"text","value":" are the column names in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IvfeCOBVJ9"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y7yeVWN29w"},{"type":"text","value":", and the values are the calculated values (in this case, mean values) for the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VLQZul1swX"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KZYJJQaAnz"},{"type":"text","value":" columns.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bXWGMa1W0b"}],"key":"KXPVToJzy8"}],"key":"cahtmFGgqm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.mean()","key":"BqvA6V32w3"},{"type":"output","id":"U0AbPAvIkHXI8t_tczWqt","data":[{"output_type":"execute_result","execution_count":40,"metadata":{},"data":{"text/plain":{"content":"Nino12        23.209619\nNino12anom     0.059725\nNino3         25.936568\nNino3anom      0.039428\nNino4         28.625064\nNino4anom      0.063814\nNino34        27.076780\nNino34anom     0.034894\ndtype: float64","content_type":"text/plain"}}}],"key":"PCHyOuxOwz"}],"key":"Iepj9LjyBY"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you want a specific statistic for only one column in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xjUj1wqLf2"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zUIxDXqHNI"},{"type":"text","value":", pull the column out of the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cy85aQRnmN"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JEvqhFcrv4"},{"type":"text","value":" with dot notation, then call the statistic function (in this case, mean) on that column, as shown below:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kBJ1VRPtjc"}],"key":"XX955G3gWb"}],"key":"RnpSsJoKEf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34.mean()","key":"jAJqeqkJ35"},{"type":"output","id":"wFGoZaaJoc5_qUvt_tMYw","data":[{"output_type":"execute_result","execution_count":41,"metadata":{},"data":{"text/plain":{"content":"np.float64(27.07677966101695)","content_type":"text/plain"}}}],"key":"kKMxiThUsZ"}],"key":"ae5MdBOVZV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subsetting Using the Datetime Column","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HevcNPEmkT"}],"identifier":"subsetting-using-the-datetime-column","label":"Subsetting Using the Datetime Column","html_id":"subsetting-using-the-datetime-column","implicit":true,"key":"T3SCsDkDEM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Slicing is a useful technique for subsetting a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lUAiiOt0oi"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aNiJUiR1HE"},{"type":"text","value":", but there are also other options that can be equally useful. In this section, some of these additional techniques are covered.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"locZDH07oW"}],"key":"Ec4C7wMQZa"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"If your ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"HuVPaCWqux"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"e474kYdkCL"},{"type":"text","value":" uses datetime values for indices, you can select data from only one month using ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fFbAGyJTTZ"},{"type":"inlineCode","value":"df.index.month","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TsFxwDCGgR"},{"type":"text","value":". In this example, we specify the number 1, which only selects data from January.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"II04bDDe6h"}],"key":"L9QsIwPrxk"}],"key":"LWBnBF0nZe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uses the datetime column\ndf[df.index.month == 1]","key":"njhFqfxXLJ"},{"type":"output","id":"Q80JAh2lZclC_TKXk0T_L","data":[{"output_type":"execute_result","execution_count":42,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   26.72   \n1983-01-01   27.42        2.96  28.92       3.29  29.00       0.70   29.36   \n1984-01-01   24.18       -0.28  24.82      -0.81  27.64      -0.66   25.64   \n1985-01-01   23.59       -0.87  24.51      -1.12  27.71      -0.59   25.43   \n1986-01-01   24.61        0.15  24.73      -0.90  28.11      -0.19   25.79   \n1987-01-01   25.30        0.84  26.69       1.06  29.02       0.72   27.91   \n1988-01-01   24.64        0.18  26.12       0.49  29.13       0.83   27.32   \n1989-01-01   24.09       -0.37  24.15      -1.48  26.54      -1.76   24.53   \n1990-01-01   24.02       -0.44  25.34      -0.29  28.56       0.26   26.55   \n1991-01-01   23.86       -0.60  25.65       0.02  29.00       0.70   27.01   \n1992-01-01   24.83        0.37  27.00       1.37  29.06       0.76   28.41   \n1993-01-01   24.43       -0.03  25.56      -0.07  28.60       0.30   26.69   \n1994-01-01   24.32       -0.14  25.71       0.08  28.47       0.17   26.60   \n1995-01-01   25.33        0.87  26.34       0.71  29.20       0.90   27.55   \n1996-01-01   23.84       -0.62  24.96      -0.67  27.92      -0.38   25.74   \n1997-01-01   23.67       -0.79  24.70      -0.93  28.41       0.11   25.96   \n1998-01-01   28.22        3.76  28.94       3.31  29.01       0.71   29.10   \n1999-01-01   23.73       -0.73  24.41      -1.22  26.59      -1.71   24.90   \n2000-01-01   23.86       -0.60  23.88      -1.75  26.96      -1.34   24.65   \n2001-01-01   23.88       -0.58  24.99      -0.64  27.50      -0.80   25.74   \n2002-01-01   23.64       -0.82  25.09      -0.54  28.81       0.51   26.50   \n2003-01-01   24.38       -0.08  26.38       0.75  29.25       0.95   27.76   \n2004-01-01   24.60        0.14  25.92       0.29  28.83       0.53   26.74   \n2005-01-01   24.47        0.01  25.89       0.26  29.21       0.91   27.10   \n2006-01-01   24.33       -0.13  25.00      -0.63  27.68      -0.62   25.64   \n2007-01-01   24.99        0.53  26.50       0.87  28.93       0.63   27.26   \n2008-01-01   23.86       -0.60  24.13      -1.50  26.62      -1.68   24.71   \n2009-01-01   24.42       -0.10  25.03      -0.60  27.42      -0.88   25.54   \n2010-01-01   24.82        0.30  26.63       1.00  29.51       1.21   28.07   \n2011-01-01   24.08       -0.44  24.31      -1.32  26.72      -1.58   24.93   \n2012-01-01   23.88       -0.64  24.90      -0.73  27.09      -1.21   25.49   \n2013-01-01   24.00       -0.52  25.06      -0.57  28.28      -0.02   26.16   \n2014-01-01   24.79        0.27  25.26      -0.37  28.14      -0.17   26.06   \n2015-01-01   24.13       -0.39  25.99       0.36  29.16       0.86   27.10   \n2016-01-01   25.93        1.41  28.21       2.58  29.65       1.35   29.17   \n2017-01-01   25.75        1.23  25.61      -0.02  28.18      -0.12   26.25   \n2018-01-01   23.71       -0.81  24.48      -1.14  28.03      -0.27   25.82   \n2019-01-01   25.10        0.57  26.17       0.55  29.00       0.65   27.08   \n2020-01-01   24.55        0.02  25.81       0.20  29.28       0.93   27.09   \n2021-01-01   23.89       -0.64  25.06      -0.55  27.10      -1.25   25.58   \n\n            Nino34anom  \ndatetime                \n1982-01-01        0.15  \n1983-01-01        2.79  \n1984-01-01       -0.93  \n1985-01-01       -1.14  \n1986-01-01       -0.78  \n1987-01-01        1.34  \n1988-01-01        0.75  \n1989-01-01       -2.04  \n1990-01-01       -0.02  \n1991-01-01        0.44  \n1992-01-01        1.84  \n1993-01-01        0.12  \n1994-01-01        0.03  \n1995-01-01        0.98  \n1996-01-01       -0.83  \n1997-01-01       -0.61  \n1998-01-01        2.53  \n1999-01-01       -1.67  \n2000-01-01       -1.92  \n2001-01-01       -0.83  \n2002-01-01       -0.07  \n2003-01-01        1.19  \n2004-01-01        0.17  \n2005-01-01        0.53  \n2006-01-01       -0.93  \n2007-01-01        0.69  \n2008-01-01       -1.86  \n2009-01-01       -1.03  \n2010-01-01        1.50  \n2011-01-01       -1.64  \n2012-01-01       -1.08  \n2013-01-01       -0.41  \n2014-01-01       -0.51  \n2015-01-01        0.53  \n2016-01-01        2.60  \n2017-01-01       -0.32  \n2018-01-01       -0.75  \n2019-01-01        0.52  \n2020-01-01        0.53  \n2021-01-01       -0.99  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>1983-01-01</th>\n      <td>27.42</td>\n      <td>2.96</td>\n      <td>28.92</td>\n      <td>3.29</td>\n      <td>29.00</td>\n      <td>0.70</td>\n      <td>29.36</td>\n      <td>2.79</td>\n    </tr>\n    <tr>\n      <th>1984-01-01</th>\n      <td>24.18</td>\n      <td>-0.28</td>\n      <td>24.82</td>\n      <td>-0.81</td>\n      <td>27.64</td>\n      <td>-0.66</td>\n      <td>25.64</td>\n      <td>-0.93</td>\n    </tr>\n    <tr>\n      <th>1985-01-01</th>\n      <td>23.59</td>\n      <td>-0.87</td>\n      <td>24.51</td>\n      <td>-1.12</td>\n      <td>27.71</td>\n      <td>-0.59</td>\n      <td>25.43</td>\n      <td>-1.14</td>\n    </tr>\n    <tr>\n      <th>1986-01-01</th>\n      <td>24.61</td>\n      <td>0.15</td>\n      <td>24.73</td>\n      <td>-0.90</td>\n      <td>28.11</td>\n      <td>-0.19</td>\n      <td>25.79</td>\n      <td>-0.78</td>\n    </tr>\n    <tr>\n      <th>1987-01-01</th>\n      <td>25.30</td>\n      <td>0.84</td>\n      <td>26.69</td>\n      <td>1.06</td>\n      <td>29.02</td>\n      <td>0.72</td>\n      <td>27.91</td>\n      <td>1.34</td>\n    </tr>\n    <tr>\n      <th>1988-01-01</th>\n      <td>24.64</td>\n      <td>0.18</td>\n      <td>26.12</td>\n      <td>0.49</td>\n      <td>29.13</td>\n      <td>0.83</td>\n      <td>27.32</td>\n      <td>0.75</td>\n    </tr>\n    <tr>\n      <th>1989-01-01</th>\n      <td>24.09</td>\n      <td>-0.37</td>\n      <td>24.15</td>\n      <td>-1.48</td>\n      <td>26.54</td>\n      <td>-1.76</td>\n      <td>24.53</td>\n      <td>-2.04</td>\n    </tr>\n    <tr>\n      <th>1990-01-01</th>\n      <td>24.02</td>\n      <td>-0.44</td>\n      <td>25.34</td>\n      <td>-0.29</td>\n      <td>28.56</td>\n      <td>0.26</td>\n      <td>26.55</td>\n      <td>-0.02</td>\n    </tr>\n    <tr>\n      <th>1991-01-01</th>\n      <td>23.86</td>\n      <td>-0.60</td>\n      <td>25.65</td>\n      <td>0.02</td>\n      <td>29.00</td>\n      <td>0.70</td>\n      <td>27.01</td>\n      <td>0.44</td>\n    </tr>\n    <tr>\n      <th>1992-01-01</th>\n      <td>24.83</td>\n      <td>0.37</td>\n      <td>27.00</td>\n      <td>1.37</td>\n      <td>29.06</td>\n      <td>0.76</td>\n      <td>28.41</td>\n      <td>1.84</td>\n    </tr>\n    <tr>\n      <th>1993-01-01</th>\n      <td>24.43</td>\n      <td>-0.03</td>\n      <td>25.56</td>\n      <td>-0.07</td>\n      <td>28.60</td>\n      <td>0.30</td>\n      <td>26.69</td>\n      <td>0.12</td>\n    </tr>\n    <tr>\n      <th>1994-01-01</th>\n      <td>24.32</td>\n      <td>-0.14</td>\n      <td>25.71</td>\n      <td>0.08</td>\n      <td>28.47</td>\n      <td>0.17</td>\n      <td>26.60</td>\n      <td>0.03</td>\n    </tr>\n    <tr>\n      <th>1995-01-01</th>\n      <td>25.33</td>\n      <td>0.87</td>\n      <td>26.34</td>\n      <td>0.71</td>\n      <td>29.20</td>\n      <td>0.90</td>\n      <td>27.55</td>\n      <td>0.98</td>\n    </tr>\n    <tr>\n      <th>1996-01-01</th>\n      <td>23.84</td>\n      <td>-0.62</td>\n      <td>24.96</td>\n      <td>-0.67</td>\n      <td>27.92</td>\n      <td>-0.38</td>\n      <td>25.74</td>\n      <td>-0.83</td>\n    </tr>\n    <tr>\n      <th>1997-01-01</th>\n      <td>23.67</td>\n      <td>-0.79</td>\n      <td>24.70</td>\n      <td>-0.93</td>\n      <td>28.41</td>\n      <td>0.11</td>\n      <td>25.96</td>\n      <td>-0.61</td>\n    </tr>\n    <tr>\n      <th>1998-01-01</th>\n      <td>28.22</td>\n      <td>3.76</td>\n      <td>28.94</td>\n      <td>3.31</td>\n      <td>29.01</td>\n      <td>0.71</td>\n      <td>29.10</td>\n      <td>2.53</td>\n    </tr>\n    <tr>\n      <th>1999-01-01</th>\n      <td>23.73</td>\n      <td>-0.73</td>\n      <td>24.41</td>\n      <td>-1.22</td>\n      <td>26.59</td>\n      <td>-1.71</td>\n      <td>24.90</td>\n      <td>-1.67</td>\n    </tr>\n    <tr>\n      <th>2000-01-01</th>\n      <td>23.86</td>\n      <td>-0.60</td>\n      <td>23.88</td>\n      <td>-1.75</td>\n      <td>26.96</td>\n      <td>-1.34</td>\n      <td>24.65</td>\n      <td>-1.92</td>\n    </tr>\n    <tr>\n      <th>2001-01-01</th>\n      <td>23.88</td>\n      <td>-0.58</td>\n      <td>24.99</td>\n      <td>-0.64</td>\n      <td>27.50</td>\n      <td>-0.80</td>\n      <td>25.74</td>\n      <td>-0.83</td>\n    </tr>\n    <tr>\n      <th>2002-01-01</th>\n      <td>23.64</td>\n      <td>-0.82</td>\n      <td>25.09</td>\n      <td>-0.54</td>\n      <td>28.81</td>\n      <td>0.51</td>\n      <td>26.50</td>\n      <td>-0.07</td>\n    </tr>\n    <tr>\n      <th>2003-01-01</th>\n      <td>24.38</td>\n      <td>-0.08</td>\n      <td>26.38</td>\n      <td>0.75</td>\n      <td>29.25</td>\n      <td>0.95</td>\n      <td>27.76</td>\n      <td>1.19</td>\n    </tr>\n    <tr>\n      <th>2004-01-01</th>\n      <td>24.60</td>\n      <td>0.14</td>\n      <td>25.92</td>\n      <td>0.29</td>\n      <td>28.83</td>\n      <td>0.53</td>\n      <td>26.74</td>\n      <td>0.17</td>\n    </tr>\n    <tr>\n      <th>2005-01-01</th>\n      <td>24.47</td>\n      <td>0.01</td>\n      <td>25.89</td>\n      <td>0.26</td>\n      <td>29.21</td>\n      <td>0.91</td>\n      <td>27.10</td>\n      <td>0.53</td>\n    </tr>\n    <tr>\n      <th>2006-01-01</th>\n      <td>24.33</td>\n      <td>-0.13</td>\n      <td>25.00</td>\n      <td>-0.63</td>\n      <td>27.68</td>\n      <td>-0.62</td>\n      <td>25.64</td>\n      <td>-0.93</td>\n    </tr>\n    <tr>\n      <th>2007-01-01</th>\n      <td>24.99</td>\n      <td>0.53</td>\n      <td>26.50</td>\n      <td>0.87</td>\n      <td>28.93</td>\n      <td>0.63</td>\n      <td>27.26</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>2008-01-01</th>\n      <td>23.86</td>\n      <td>-0.60</td>\n      <td>24.13</td>\n      <td>-1.50</td>\n      <td>26.62</td>\n      <td>-1.68</td>\n      <td>24.71</td>\n      <td>-1.86</td>\n    </tr>\n    <tr>\n      <th>2009-01-01</th>\n      <td>24.42</td>\n      <td>-0.10</td>\n      <td>25.03</td>\n      <td>-0.60</td>\n      <td>27.42</td>\n      <td>-0.88</td>\n      <td>25.54</td>\n      <td>-1.03</td>\n    </tr>\n    <tr>\n      <th>2010-01-01</th>\n      <td>24.82</td>\n      <td>0.30</td>\n      <td>26.63</td>\n      <td>1.00</td>\n      <td>29.51</td>\n      <td>1.21</td>\n      <td>28.07</td>\n      <td>1.50</td>\n    </tr>\n    <tr>\n      <th>2011-01-01</th>\n      <td>24.08</td>\n      <td>-0.44</td>\n      <td>24.31</td>\n      <td>-1.32</td>\n      <td>26.72</td>\n      <td>-1.58</td>\n      <td>24.93</td>\n      <td>-1.64</td>\n    </tr>\n    <tr>\n      <th>2012-01-01</th>\n      <td>23.88</td>\n      <td>-0.64</td>\n      <td>24.90</td>\n      <td>-0.73</td>\n      <td>27.09</td>\n      <td>-1.21</td>\n      <td>25.49</td>\n      <td>-1.08</td>\n    </tr>\n    <tr>\n      <th>2013-01-01</th>\n      <td>24.00</td>\n      <td>-0.52</td>\n      <td>25.06</td>\n      <td>-0.57</td>\n      <td>28.28</td>\n      <td>-0.02</td>\n      <td>26.16</td>\n      <td>-0.41</td>\n    </tr>\n    <tr>\n      <th>2014-01-01</th>\n      <td>24.79</td>\n      <td>0.27</td>\n      <td>25.26</td>\n      <td>-0.37</td>\n      <td>28.14</td>\n      <td>-0.17</td>\n      <td>26.06</td>\n      <td>-0.51</td>\n    </tr>\n    <tr>\n      <th>2015-01-01</th>\n      <td>24.13</td>\n      <td>-0.39</td>\n      <td>25.99</td>\n      <td>0.36</td>\n      <td>29.16</td>\n      <td>0.86</td>\n      <td>27.10</td>\n      <td>0.53</td>\n    </tr>\n    <tr>\n      <th>2016-01-01</th>\n      <td>25.93</td>\n      <td>1.41</td>\n      <td>28.21</td>\n      <td>2.58</td>\n      <td>29.65</td>\n      <td>1.35</td>\n      <td>29.17</td>\n      <td>2.60</td>\n    </tr>\n    <tr>\n      <th>2017-01-01</th>\n      <td>25.75</td>\n      <td>1.23</td>\n      <td>25.61</td>\n      <td>-0.02</td>\n      <td>28.18</td>\n      <td>-0.12</td>\n      <td>26.25</td>\n      <td>-0.32</td>\n    </tr>\n    <tr>\n      <th>2018-01-01</th>\n      <td>23.71</td>\n      <td>-0.81</td>\n      <td>24.48</td>\n      <td>-1.14</td>\n      <td>28.03</td>\n      <td>-0.27</td>\n      <td>25.82</td>\n      <td>-0.75</td>\n    </tr>\n    <tr>\n      <th>2019-01-01</th>\n      <td>25.10</td>\n      <td>0.57</td>\n      <td>26.17</td>\n      <td>0.55</td>\n      <td>29.00</td>\n      <td>0.65</td>\n      <td>27.08</td>\n      <td>0.52</td>\n    </tr>\n    <tr>\n      <th>2020-01-01</th>\n      <td>24.55</td>\n      <td>0.02</td>\n      <td>25.81</td>\n      <td>0.20</td>\n      <td>29.28</td>\n      <td>0.93</td>\n      <td>27.09</td>\n      <td>0.53</td>\n    </tr>\n    <tr>\n      <th>2021-01-01</th>\n      <td>23.89</td>\n      <td>-0.64</td>\n      <td>25.06</td>\n      <td>-0.55</td>\n      <td>27.10</td>\n      <td>-1.25</td>\n      <td>25.58</td>\n      <td>-0.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"RM1fseCLgR"}],"key":"GksSbTl5cs"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This example shows how to create a new column containing the month portion of the datetime index for each data row. The value returned by ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"toVZ2anAIZ"},{"type":"inlineCode","value":"df.index.month","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HyZn9XX9VL"},{"type":"text","value":" is used to obtain the data for this new column:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NQf1RIMyK4"}],"key":"T8DzQHPkDU"}],"key":"tHUmxoFehE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df['month'] = df.index.month","key":"o4N36kXWyK"},{"type":"output","id":"1kkhlS8PM_53mgOCLeNT0","data":[],"key":"c3DFgyRUuC"}],"key":"k4AUWfBD5M"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This next example illustrates how to use the new month column to calculate average monthly values over the other data columns. First, we use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CvJBtfgSHH"},{"type":"inlineCode","value":"groupby","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"y6VJT4JktR"},{"type":"text","value":" method to group the other columns by the month.  Second, we take the average (mean) to obtain the monthly averages. Finally, we plot the resulting data as a line plot by simply calling ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AnmNLTgrrK"},{"type":"inlineCode","value":"plot()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YHneyDbVq4"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EOV21KfLIB"}],"key":"FzBLlyjLzW"}],"key":"LmN7kRralg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.groupby('month').mean().plot();","key":"wlLBzKcrEM"},{"type":"output","id":"Kmm0JYipBtrpJ2OIQkO4T","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"581ef187b75bbcf1ae9fd991d205646d","path":"/_preview/560/build/581ef187b75bbcf1ae9fd991d205646d.png"}}}],"key":"oZJTUZTLfG"}],"key":"s1rpUrgEjN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Investigating Extreme Values","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pseS2X2md8"}],"identifier":"investigating-extreme-values","label":"Investigating Extreme Values","html_id":"investigating-extreme-values","implicit":true,"key":"WGHmOXOqm9"}],"key":"Kd3rTU0Ros"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you need to search for rows that meet a specific criterion, you can use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h9maJIwNA2"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"conditional indexing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VMbG4YHjqp"}],"key":"cfUuUZrFQT"},{"type":"text","value":".  In this example, we search for rows where the Nino34 anomaly value (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EeWsTKQSkB"},{"type":"inlineCode","value":"Nino34anom","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oEHULCjYcz"},{"type":"text","value":") is greater than 2:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sLsd7ltruA"}],"key":"kzK1WJe0ES"}],"key":"TPOZ4hojjK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df[df.Nino34anom > 2]","key":"r8fD0Y78NZ"},{"type":"output","id":"VWZDhxTP-DkJs9M86zaV9","data":[{"output_type":"execute_result","execution_count":45,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-11-01   24.59        3.00  27.62       2.64  29.23       0.60   28.81   \n1982-12-01   26.13        3.34  28.39       3.25  29.15       0.66   29.21   \n1983-01-01   27.42        2.96  28.92       3.29  29.00       0.70   29.36   \n1983-02-01   28.09        2.02  28.92       2.55  28.79       0.69   29.13   \n1997-08-01   24.80        4.15  27.84       2.85  29.26       0.58   28.84   \n1997-09-01   24.40        4.04  27.84       2.99  29.32       0.63   28.93   \n1997-10-01   24.58        3.76  28.17       3.25  29.32       0.66   29.23   \n1997-11-01   25.63        4.04  28.55       3.57  29.49       0.86   29.32   \n1997-12-01   26.92        4.13  28.76       3.62  29.32       0.83   29.26   \n1998-01-01   28.22        3.76  28.94       3.31  29.01       0.71   29.10   \n1998-02-01   28.98        2.91  28.93       2.56  28.87       0.77   28.86   \n2015-08-01   22.88        2.24  27.33       2.34  29.66       0.98   28.89   \n2015-09-01   22.91        2.57  27.48       2.63  29.73       1.04   29.00   \n2015-10-01   23.31        2.52  27.58       2.66  29.79       1.12   29.15   \n2015-11-01   23.83        2.24  27.91       2.93  30.30       1.67   29.60   \n2015-12-01   25.01        2.19  27.99       2.85  30.11       1.63   29.39   \n2016-01-01   25.93        1.41  28.21       2.58  29.65       1.35   29.17   \n2016-02-01   26.81        0.67  28.36       1.99  29.55       1.45   29.12   \n\n            Nino34anom  month  \ndatetime                       \n1982-11-01        2.16     11  \n1982-12-01        2.64     12  \n1983-01-01        2.79      1  \n1983-02-01        2.41      2  \n1997-08-01        2.02      8  \n1997-09-01        2.21      9  \n1997-10-01        2.54     10  \n1997-11-01        2.67     11  \n1997-12-01        2.69     12  \n1998-01-01        2.53      1  \n1998-02-01        2.14      2  \n2015-08-01        2.07      8  \n2015-09-01        2.28      9  \n2015-10-01        2.46     10  \n2015-11-01        2.95     11  \n2015-12-01        2.82     12  \n2016-01-01        2.60      1  \n2016-02-01        2.40      2  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n      <th>month</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-11-01</th>\n      <td>24.59</td>\n      <td>3.00</td>\n      <td>27.62</td>\n      <td>2.64</td>\n      <td>29.23</td>\n      <td>0.60</td>\n      <td>28.81</td>\n      <td>2.16</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1982-12-01</th>\n      <td>26.13</td>\n      <td>3.34</td>\n      <td>28.39</td>\n      <td>3.25</td>\n      <td>29.15</td>\n      <td>0.66</td>\n      <td>29.21</td>\n      <td>2.64</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1983-01-01</th>\n      <td>27.42</td>\n      <td>2.96</td>\n      <td>28.92</td>\n      <td>3.29</td>\n      <td>29.00</td>\n      <td>0.70</td>\n      <td>29.36</td>\n      <td>2.79</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1983-02-01</th>\n      <td>28.09</td>\n      <td>2.02</td>\n      <td>28.92</td>\n      <td>2.55</td>\n      <td>28.79</td>\n      <td>0.69</td>\n      <td>29.13</td>\n      <td>2.41</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1997-08-01</th>\n      <td>24.80</td>\n      <td>4.15</td>\n      <td>27.84</td>\n      <td>2.85</td>\n      <td>29.26</td>\n      <td>0.58</td>\n      <td>28.84</td>\n      <td>2.02</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1997-09-01</th>\n      <td>24.40</td>\n      <td>4.04</td>\n      <td>27.84</td>\n      <td>2.99</td>\n      <td>29.32</td>\n      <td>0.63</td>\n      <td>28.93</td>\n      <td>2.21</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1997-10-01</th>\n      <td>24.58</td>\n      <td>3.76</td>\n      <td>28.17</td>\n      <td>3.25</td>\n      <td>29.32</td>\n      <td>0.66</td>\n      <td>29.23</td>\n      <td>2.54</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1997-11-01</th>\n      <td>25.63</td>\n      <td>4.04</td>\n      <td>28.55</td>\n      <td>3.57</td>\n      <td>29.49</td>\n      <td>0.86</td>\n      <td>29.32</td>\n      <td>2.67</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1997-12-01</th>\n      <td>26.92</td>\n      <td>4.13</td>\n      <td>28.76</td>\n      <td>3.62</td>\n      <td>29.32</td>\n      <td>0.83</td>\n      <td>29.26</td>\n      <td>2.69</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1998-01-01</th>\n      <td>28.22</td>\n      <td>3.76</td>\n      <td>28.94</td>\n      <td>3.31</td>\n      <td>29.01</td>\n      <td>0.71</td>\n      <td>29.10</td>\n      <td>2.53</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1998-02-01</th>\n      <td>28.98</td>\n      <td>2.91</td>\n      <td>28.93</td>\n      <td>2.56</td>\n      <td>28.87</td>\n      <td>0.77</td>\n      <td>28.86</td>\n      <td>2.14</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2015-08-01</th>\n      <td>22.88</td>\n      <td>2.24</td>\n      <td>27.33</td>\n      <td>2.34</td>\n      <td>29.66</td>\n      <td>0.98</td>\n      <td>28.89</td>\n      <td>2.07</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2015-09-01</th>\n      <td>22.91</td>\n      <td>2.57</td>\n      <td>27.48</td>\n      <td>2.63</td>\n      <td>29.73</td>\n      <td>1.04</td>\n      <td>29.00</td>\n      <td>2.28</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>2015-10-01</th>\n      <td>23.31</td>\n      <td>2.52</td>\n      <td>27.58</td>\n      <td>2.66</td>\n      <td>29.79</td>\n      <td>1.12</td>\n      <td>29.15</td>\n      <td>2.46</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2015-11-01</th>\n      <td>23.83</td>\n      <td>2.24</td>\n      <td>27.91</td>\n      <td>2.93</td>\n      <td>30.30</td>\n      <td>1.67</td>\n      <td>29.60</td>\n      <td>2.95</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>2015-12-01</th>\n      <td>25.01</td>\n      <td>2.19</td>\n      <td>27.99</td>\n      <td>2.85</td>\n      <td>30.11</td>\n      <td>1.63</td>\n      <td>29.39</td>\n      <td>2.82</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2016-01-01</th>\n      <td>25.93</td>\n      <td>1.41</td>\n      <td>28.21</td>\n      <td>2.58</td>\n      <td>29.65</td>\n      <td>1.35</td>\n      <td>29.17</td>\n      <td>2.60</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2016-02-01</th>\n      <td>26.81</td>\n      <td>0.67</td>\n      <td>28.36</td>\n      <td>1.99</td>\n      <td>29.55</td>\n      <td>1.45</td>\n      <td>29.12</td>\n      <td>2.40</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"n7cTO2fvG1"}],"key":"cngiBYYMiS"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This example shows how to use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"urolgLunLo"},{"type":"inlineCode","value":"sort_values","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kdQj8ZXMzp"},{"type":"text","value":" method on a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t2hHmGL22K"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FckuRmdlBQ"},{"type":"text","value":". This method sorts values in a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"c5LA1fS1zE"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CqElA5D3I1"},{"type":"text","value":" by the column specified as an argument.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t5KBNuWmAp"}],"key":"hDNTaUBt55"}],"key":"eje0KLreBq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.sort_values('Nino34anom')","key":"PlFmTjzieT"},{"type":"output","id":"L7SCDkb0YxDO5e8NpBFoJ","data":[{"output_type":"execute_result","execution_count":46,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1988-11-01   20.55       -1.04  23.03      -1.95  26.76      -1.87   24.27   \n1988-12-01   21.80       -0.99  23.07      -2.07  26.75      -1.74   24.33   \n1988-10-01   19.50       -1.32  23.17      -1.75  27.06      -1.60   24.62   \n1989-01-01   24.09       -0.37  24.15      -1.48  26.54      -1.76   24.53   \n2000-01-01   23.86       -0.60  23.88      -1.75  26.96      -1.34   24.65   \n...            ...         ...    ...        ...    ...        ...     ...   \n1997-11-01   25.63        4.04  28.55       3.57  29.49       0.86   29.32   \n1997-12-01   26.92        4.13  28.76       3.62  29.32       0.83   29.26   \n1983-01-01   27.42        2.96  28.92       3.29  29.00       0.70   29.36   \n2015-12-01   25.01        2.19  27.99       2.85  30.11       1.63   29.39   \n2015-11-01   23.83        2.24  27.91       2.93  30.30       1.67   29.60   \n\n            Nino34anom  month  \ndatetime                       \n1988-11-01       -2.38     11  \n1988-12-01       -2.24     12  \n1988-10-01       -2.07     10  \n1989-01-01       -2.04      1  \n2000-01-01       -1.92      1  \n...                ...    ...  \n1997-11-01        2.67     11  \n1997-12-01        2.69     12  \n1983-01-01        2.79      1  \n2015-12-01        2.82     12  \n2015-11-01        2.95     11  \n\n[472 rows x 9 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n      <th>month</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1988-11-01</th>\n      <td>20.55</td>\n      <td>-1.04</td>\n      <td>23.03</td>\n      <td>-1.95</td>\n      <td>26.76</td>\n      <td>-1.87</td>\n      <td>24.27</td>\n      <td>-2.38</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1988-12-01</th>\n      <td>21.80</td>\n      <td>-0.99</td>\n      <td>23.07</td>\n      <td>-2.07</td>\n      <td>26.75</td>\n      <td>-1.74</td>\n      <td>24.33</td>\n      <td>-2.24</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1988-10-01</th>\n      <td>19.50</td>\n      <td>-1.32</td>\n      <td>23.17</td>\n      <td>-1.75</td>\n      <td>27.06</td>\n      <td>-1.60</td>\n      <td>24.62</td>\n      <td>-2.07</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1989-01-01</th>\n      <td>24.09</td>\n      <td>-0.37</td>\n      <td>24.15</td>\n      <td>-1.48</td>\n      <td>26.54</td>\n      <td>-1.76</td>\n      <td>24.53</td>\n      <td>-2.04</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2000-01-01</th>\n      <td>23.86</td>\n      <td>-0.60</td>\n      <td>23.88</td>\n      <td>-1.75</td>\n      <td>26.96</td>\n      <td>-1.34</td>\n      <td>24.65</td>\n      <td>-1.92</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1997-11-01</th>\n      <td>25.63</td>\n      <td>4.04</td>\n      <td>28.55</td>\n      <td>3.57</td>\n      <td>29.49</td>\n      <td>0.86</td>\n      <td>29.32</td>\n      <td>2.67</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1997-12-01</th>\n      <td>26.92</td>\n      <td>4.13</td>\n      <td>28.76</td>\n      <td>3.62</td>\n      <td>29.32</td>\n      <td>0.83</td>\n      <td>29.26</td>\n      <td>2.69</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1983-01-01</th>\n      <td>27.42</td>\n      <td>2.96</td>\n      <td>28.92</td>\n      <td>3.29</td>\n      <td>29.00</td>\n      <td>0.70</td>\n      <td>29.36</td>\n      <td>2.79</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2015-12-01</th>\n      <td>25.01</td>\n      <td>2.19</td>\n      <td>27.99</td>\n      <td>2.85</td>\n      <td>30.11</td>\n      <td>1.63</td>\n      <td>29.39</td>\n      <td>2.82</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2015-11-01</th>\n      <td>23.83</td>\n      <td>2.24</td>\n      <td>27.91</td>\n      <td>2.93</td>\n      <td>30.30</td>\n      <td>1.67</td>\n      <td>29.60</td>\n      <td>2.95</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n<p>472 rows × 9 columns</p>\n</div>","content_type":"text/html"}}}],"key":"tNiUu8QGRT"}],"key":"cxXBouUPZO"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can also reverse the ordering of the sort by specifying the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NZzNFRXqsK"},{"type":"inlineCode","value":"ascending","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eWrMDKuzm5"},{"type":"text","value":" keyword argument as ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fC3gMcAr3n"},{"type":"inlineCode","value":"False","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hKcONBSXww"},{"type":"text","value":":","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EMGHyX4x4D"}],"key":"hn8zJenB2g"}],"key":"jzF8XhNqMG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.sort_values('Nino34anom', ascending=False)","key":"cdWTByuMC9"},{"type":"output","id":"6t-Eo3zUc67WCx-pPDjkh","data":[{"output_type":"execute_result","execution_count":47,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n2015-11-01   23.83        2.24  27.91       2.93  30.30       1.67   29.60   \n2015-12-01   25.01        2.19  27.99       2.85  30.11       1.63   29.39   \n1983-01-01   27.42        2.96  28.92       3.29  29.00       0.70   29.36   \n1997-12-01   26.92        4.13  28.76       3.62  29.32       0.83   29.26   \n1997-11-01   25.63        4.04  28.55       3.57  29.49       0.86   29.32   \n...            ...         ...    ...        ...    ...        ...     ...   \n2000-01-01   23.86       -0.60  23.88      -1.75  26.96      -1.34   24.65   \n1989-01-01   24.09       -0.37  24.15      -1.48  26.54      -1.76   24.53   \n1988-10-01   19.50       -1.32  23.17      -1.75  27.06      -1.60   24.62   \n1988-12-01   21.80       -0.99  23.07      -2.07  26.75      -1.74   24.33   \n1988-11-01   20.55       -1.04  23.03      -1.95  26.76      -1.87   24.27   \n\n            Nino34anom  month  \ndatetime                       \n2015-11-01        2.95     11  \n2015-12-01        2.82     12  \n1983-01-01        2.79      1  \n1997-12-01        2.69     12  \n1997-11-01        2.67     11  \n...                ...    ...  \n2000-01-01       -1.92      1  \n1989-01-01       -2.04      1  \n1988-10-01       -2.07     10  \n1988-12-01       -2.24     12  \n1988-11-01       -2.38     11  \n\n[472 rows x 9 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n      <th>month</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-11-01</th>\n      <td>23.83</td>\n      <td>2.24</td>\n      <td>27.91</td>\n      <td>2.93</td>\n      <td>30.30</td>\n      <td>1.67</td>\n      <td>29.60</td>\n      <td>2.95</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>2015-12-01</th>\n      <td>25.01</td>\n      <td>2.19</td>\n      <td>27.99</td>\n      <td>2.85</td>\n      <td>30.11</td>\n      <td>1.63</td>\n      <td>29.39</td>\n      <td>2.82</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1983-01-01</th>\n      <td>27.42</td>\n      <td>2.96</td>\n      <td>28.92</td>\n      <td>3.29</td>\n      <td>29.00</td>\n      <td>0.70</td>\n      <td>29.36</td>\n      <td>2.79</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1997-12-01</th>\n      <td>26.92</td>\n      <td>4.13</td>\n      <td>28.76</td>\n      <td>3.62</td>\n      <td>29.32</td>\n      <td>0.83</td>\n      <td>29.26</td>\n      <td>2.69</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1997-11-01</th>\n      <td>25.63</td>\n      <td>4.04</td>\n      <td>28.55</td>\n      <td>3.57</td>\n      <td>29.49</td>\n      <td>0.86</td>\n      <td>29.32</td>\n      <td>2.67</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2000-01-01</th>\n      <td>23.86</td>\n      <td>-0.60</td>\n      <td>23.88</td>\n      <td>-1.75</td>\n      <td>26.96</td>\n      <td>-1.34</td>\n      <td>24.65</td>\n      <td>-1.92</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1989-01-01</th>\n      <td>24.09</td>\n      <td>-0.37</td>\n      <td>24.15</td>\n      <td>-1.48</td>\n      <td>26.54</td>\n      <td>-1.76</td>\n      <td>24.53</td>\n      <td>-2.04</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1988-10-01</th>\n      <td>19.50</td>\n      <td>-1.32</td>\n      <td>23.17</td>\n      <td>-1.75</td>\n      <td>27.06</td>\n      <td>-1.60</td>\n      <td>24.62</td>\n      <td>-2.07</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1988-12-01</th>\n      <td>21.80</td>\n      <td>-0.99</td>\n      <td>23.07</td>\n      <td>-2.07</td>\n      <td>26.75</td>\n      <td>-1.74</td>\n      <td>24.33</td>\n      <td>-2.24</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1988-11-01</th>\n      <td>20.55</td>\n      <td>-1.04</td>\n      <td>23.03</td>\n      <td>-1.95</td>\n      <td>26.76</td>\n      <td>-1.87</td>\n      <td>24.27</td>\n      <td>-2.38</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n<p>472 rows × 9 columns</p>\n</div>","content_type":"text/html"}}}],"key":"qnY75Lf52R"}],"key":"ZbVODbZQFL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resampling","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wSaYFuLGJX"}],"identifier":"resampling","label":"Resampling","html_id":"resampling","implicit":true,"key":"FEYHCfJuWn"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In these examples, we illustrate a process known as resampling. Using resampling, you can change the frequency of index data values, reducing so-called ‘noise’ in a data plot. This is especially useful when working with timeseries data; plots can be equally effective with resampled data in these cases. The resampling performed in these examples converts monthly values to yearly averages. This is performed by passing the value ‘1Y’ to the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DkVbzn1GcF"},{"type":"inlineCode","value":"resample","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tQwVHK1K5g"},{"type":"text","value":" method.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"WQVQ85vt1T"}],"key":"gf2XNMDfUb"}],"key":"YuliW59dPy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34.plot();","key":"nw6nfutfYO"},{"type":"output","id":"QgTbBjemqVIxpP28duSys","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"40b3111b4cd35375fdbd655f3fd005c8","path":"/_preview/560/build/40b3111b4cd35375fdbd655f3fd005c8.png"}}}],"key":"E3CQuS1VI1"}],"key":"X9OuuAFYSN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34.resample('1Y').mean().plot();","key":"fjOiroFiIy"},{"type":"output","id":"K364NohVwPU4l9Zxgl_lM","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_4135/233158901.py:1: FutureWarning: 'Y' is deprecated and will be removed in a future version, please use 'YE' instead.\n  df.Nino34.resample('1Y').mean().plot();\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"586266d39b5423b7d0e842d466d25d9c","path":"/_preview/560/build/586266d39b5423b7d0e842d466d25d9c.png"}}}],"key":"r9bxKZFDOS"}],"key":"mY6kz1MdlU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Applying operations to a DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IgpIk7chdJ"}],"identifier":"applying-operations-to-a-dataframe","label":"Applying operations to a DataFrame","html_id":"applying-operations-to-a-dataframe","implicit":true,"key":"qUyqxELEMC"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"One of the most commonly used features in Pandas is the performing of calculations to multiple data values in a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ywfqxWFS7o"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fcBrbKZlYA"},{"type":"text","value":" simultaneously. Let’s first look at a familiar concept: a function that converts single values.  The following example uses such a function to convert temperature values from degrees Celsius to Kelvin.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AgbfNiP1b1"}],"key":"G9LbF7sMz0"}],"key":"C2yETkxnMk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def convert_degc_to_kelvin(temperature_degc):\n    \"\"\"\n    Converts from degrees celsius to Kelvin\n    \"\"\"\n\n    return temperature_degc + 273.15","key":"Yys0qW2oKG"},{"type":"output","id":"BDhP7bVX5IqDlWT2t4w9f","data":[],"key":"yGmCJLvT0w"}],"key":"gdjrG1B5pb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Convert a single value\nconvert_degc_to_kelvin(0)","key":"FESC4DZwK8"},{"type":"output","id":"_2iVIbvWLuGD7FWcGbjg9","data":[{"output_type":"execute_result","execution_count":51,"metadata":{},"data":{"text/plain":{"content":"273.15","content_type":"text/plain"}}}],"key":"blEfQxtrcl"}],"key":"ndBi2aYZ9Y"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The following examples instead illustrate a new concept: using such functions with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qJHWpdlu94"},{"type":"inlineCode","value":"DataFrames","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GoMbSZV2tQ"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wDB3cwHA8v"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aE52FJznBF"},{"type":"text","value":". For the first example, we start by creating a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OsdGwHhI95"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rtcjOp3AHb"},{"type":"text","value":"; in order to do so, we subset the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NC6EQHUikg"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IvEI4gUDMH"},{"type":"text","value":" by the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OlA06bXb6y"},{"type":"inlineCode","value":"Nino34","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AK0neWZ8gy"},{"type":"text","value":" column. This has already been done earlier in this page; we do not need to create this ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iH50mc7Lzy"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZS2TbfqUpn"},{"type":"text","value":" again. We are using this particular ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oXchosnmOB"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sAqYWbj4SK"},{"type":"text","value":" for a reason: the data values are in degrees Celsius.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"o5JEq4eW8K"}],"key":"soUoUTB0zR"}],"key":"yuU7C5USF1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nino34_series","key":"BJQY7s2JO7"},{"type":"output","id":"w9hV116OLWUu9_i0FLsC-","data":[{"output_type":"execute_result","execution_count":52,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    26.72\n1982-02-01    26.70\n1982-03-01    27.20\n1982-04-01    28.02\n1982-05-01    28.54\n              ...  \n2020-12-01    25.53\n2021-01-01    25.58\n2021-02-01    25.81\n2021-03-01    26.75\n2021-04-01    27.40\nName: Nino34, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"uDgw2UiUp8"}],"key":"PGTxiykqZH"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here, we look at a portion of an existing ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dffNYcl83z"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vlRTv7Bcpc"},{"type":"text","value":" column. Notice that this column portion is a Pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JRCCUdn9Xr"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BblvKSQI9Z"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RO4OYz4uMv"}],"key":"zuFSVBZbFs"}],"key":"LbT1GAo1yS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"type(df.Nino12[0:10])","key":"pfJEc5C4aS"},{"type":"output","id":"xTXsnp52NxfFQpF4rFEGN","data":[{"output_type":"execute_result","execution_count":53,"metadata":{},"data":{"text/plain":{"content":"pandas.core.series.Series","content_type":"text/plain"}}}],"key":"Q0CqF6eY4T"}],"key":"ThVKuZAZkF"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As shown in the following example, each Pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PSEo0U2ylX"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"F7av1r9NfV"},{"type":"text","value":" contains a representation of its data in numpy format. Therefore, it is possible to convert a Pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cku5I2rB5F"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jFvMWRhoLy"},{"type":"text","value":" into a numpy array; this is done using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f9hOfXsPVX"},{"type":"inlineCode","value":".values","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JMCM014qil"},{"type":"text","value":" method:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Rtr3UcJ43j"}],"key":"LldoqyqiQH"}],"key":"uuXW5qHgEc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"type(df.Nino12.values[0:10])","key":"HGr4r1Fu1q"},{"type":"output","id":"s5fmfTrnb8CDyMSRGFgcU","data":[{"output_type":"execute_result","execution_count":54,"metadata":{},"data":{"text/plain":{"content":"numpy.ndarray","content_type":"text/plain"}}}],"key":"EirH2uKQcM"}],"key":"nD1XBedXXk"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This example illustrates how to use the temperature-conversion function defined above on a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SNIzjaG78m"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xevtUtnkqw"},{"type":"text","value":" object. Just as calling the function with a single value returns a single value, calling the function on a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kM9jdXJRSD"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"w0Nj9Nor0n"},{"type":"text","value":" object returns another ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WEhA54gLtA"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CBiGtNCVVb"},{"type":"text","value":" object. The function performs the temperature conversion on each data value in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SGaceUvnj5"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZlhZjQUdk9"},{"type":"text","value":", and returns a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BQu3cJcyzM"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g5Nh71peKt"},{"type":"text","value":" with all values converted.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LmnuhFils5"}],"key":"WWRZoxflp2"}],"key":"EstdTpNYzL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"convert_degc_to_kelvin(nino34_series)","key":"zt4XjnkOuA"},{"type":"output","id":"Q-9pUBXdywqUxd7w3TnWo","data":[{"output_type":"execute_result","execution_count":55,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    299.87\n1982-02-01    299.85\n1982-03-01    300.35\n1982-04-01    301.17\n1982-05-01    301.69\n               ...  \n2020-12-01    298.68\n2021-01-01    298.73\n2021-02-01    298.96\n2021-03-01    299.90\n2021-04-01    300.55\nName: Nino34, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"LpIyS5L0C9"}],"key":"X5txKiWYE6"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we call the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wFivqUUFLA"},{"type":"inlineCode","value":".values","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n6WjLtMZ2j"},{"type":"text","value":" method on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ylojf7CQat"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"naorqQkhab"},{"type":"text","value":" passed to the function, the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J3aX6bgG8M"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tYxEktduLv"},{"type":"text","value":" is converted to a numpy array, as described above. The function then converts each value in the numpy array, and returns a new numpy array with all values sorted.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SkuLvkvD6r"}],"key":"OL5SQWFZcz"}],"key":"Lk6nGz9txQ"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-warning","children":[{"type":"paragraph","children":[{"type":"text","value":"Warning","key":"Nf5Sm779zm"}],"key":"LHXrffKEyi"},{"type":"text","value":"It is recommended to only convert ","key":"PYtpExcVe4"},{"type":"inlineCode","value":"Series","key":"SRieq7UiHd"},{"type":"text","value":" to NumPy arrays when necessary; doing so removes the label information that enables much of the Pandas core functionality.","key":"zYr66zuc12"}],"key":"cjZ5YFI44U"}],"key":"m0Ln5kcGm5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"convert_degc_to_kelvin(nino34_series.values)","key":"IQgmhzD7m7"},{"type":"output","id":"x8kcFEwJ6aZ9qVkD1Q6X6","data":[{"output_type":"execute_result","execution_count":56,"metadata":{},"data":{"text/plain":{"content":"array([299.87, 299.85, 300.35, 301.17, 301.69, 301.9 , 301.25, 301.08,\n       301.26, 301.79, 301.96, 302.36, 302.51, 302.28, 302.18, 302.06,\n       302.04, 301.39, 300.22, 299.68, 299.59, 299.02, 298.73, 298.74,\n       298.79, 299.54, 300.01, 300.54, 300.54, 300.01, 299.89, 299.49,\n       299.58, 299.08, 298.56, 298.15, 298.58, 298.82, 299.38, 299.95,\n       300.26, 300.01, 299.84, 299.65, 299.4 , 299.34, 299.34, 299.26,\n       298.94, 299.09, 299.8 , 300.59, 300.65, 300.84, 300.52, 300.3 ,\n       300.48, 300.72, 300.88, 300.85, 301.06, 301.17, 301.62, 301.95,\n       301.9 , 302.18, 301.95, 301.73, 301.54, 301.22, 301.14, 300.75,\n       300.47, 300.37, 300.46, 300.47, 299.63, 299.26, 298.72, 298.39,\n       298.58, 297.77, 297.42, 297.48, 297.68, 298.48, 299.05, 299.84,\n       300.24, 300.13, 299.89, 299.48, 299.4 , 299.41, 299.39, 299.53,\n       299.7 , 300.1 , 300.61, 301.17, 301.21, 300.73, 300.4 , 300.2 ,\n       299.9 , 300.13, 299.87, 300.06, 300.16, 300.08, 300.4 , 301.13,\n       301.5 , 301.51, 301.07, 300.59, 300.22, 300.78, 301.01, 301.52,\n       301.56, 301.78, 301.98, 302.29, 302.14, 301.17, 300.68, 299.79,\n       299.63, 299.49, 299.66, 299.88, 299.84, 300.12, 300.81, 301.74,\n       301.97, 301.43, 300.7 , 299.99, 300.07, 300.08, 300.06, 299.91,\n       299.75, 299.74, 300.42, 301.05, 301.19, 301.14, 300.5 , 300.5 ,\n       300.15, 300.64, 301.02, 301.02, 300.7 , 300.6 , 300.78, 301.08,\n       300.88, 300.74, 300.16, 299.48, 299.11, 298.82, 298.81, 298.72,\n       298.89, 299.  , 299.77, 300.51, 300.52, 300.47, 300.24, 299.71,\n       299.5 , 299.39, 299.34, 299.17, 299.11, 299.51, 300.18, 301.18,\n       301.75, 302.09, 302.07, 301.99, 302.08, 302.38, 302.47, 302.41,\n       302.25, 302.01, 301.82, 301.71, 301.62, 299.87, 299.09, 298.64,\n       298.76, 298.49, 298.33, 297.94, 298.05, 298.56, 299.4 , 299.99,\n       300.12, 299.75, 299.5 , 298.74, 298.86, 298.79, 298.27, 298.05,\n       297.8 , 298.34, 299.23, 300.16, 300.27, 300.18, 299.87, 299.6 ,\n       299.36, 299.11, 298.93, 298.74, 298.89, 299.26, 299.99, 300.67,\n       300.75, 300.83, 300.47, 300.02, 299.7 , 299.74, 299.6 , 299.32,\n       299.65, 300.1 , 300.47, 301.09, 301.3 , 301.58, 301.13, 300.94,\n       300.98, 301.2 , 301.42, 301.24, 300.91, 300.64, 300.96, 300.96,\n       300.52, 300.63, 300.58, 300.  , 300.11, 300.34, 300.2 , 300.04,\n       299.89, 300.01, 300.25, 300.99, 301.21, 300.91, 300.84, 300.69,\n       300.62, 300.53, 300.46, 300.46, 300.25, 300.11, 300.7 , 301.22,\n       301.35, 301.2 , 300.62, 300.03, 299.78, 299.9 , 299.49, 299.04,\n       298.79, 299.23, 299.72, 300.74, 301.06, 301.  , 300.5 , 300.37,\n       300.49, 300.62, 300.88, 300.91, 300.41, 299.96, 300.33, 300.93,\n       300.72, 300.7 , 299.94, 299.35, 298.92, 298.37, 298.21, 298.12,\n       297.86, 297.98, 299.22, 299.98, 300.33, 300.32, 300.34, 300.  ,\n       299.59, 299.48, 299.45, 298.89, 298.69, 299.19, 299.82, 300.65,\n       301.18, 301.26, 301.09, 300.68, 300.62, 300.78, 301.34, 301.45,\n       301.22, 301.09, 301.44, 301.51, 300.83, 300.15, 299.24, 298.65,\n       298.22, 298.16, 298.22, 298.1 , 298.08, 298.61, 299.38, 300.17,\n       300.57, 300.61, 300.11, 299.34, 299.13, 298.87, 298.75, 298.68,\n       298.64, 299.18, 299.78, 300.53, 300.95, 301.1 , 300.9 , 300.7 ,\n       300.39, 300.13, 300.16, 299.61, 299.31, 299.47, 300.15, 300.83,\n       300.72, 300.58, 300.06, 299.69, 299.8 , 299.51, 299.8 , 299.68,\n       299.21, 299.33, 300.14, 301.16, 301.46, 301.26, 300.55, 300.17,\n       300.32, 300.32, 300.65, 300.5 , 300.25, 300.44, 300.94, 301.71,\n       302.03, 302.11, 301.97, 302.04, 302.15, 302.3 , 302.75, 302.54,\n       302.32, 302.27, 302.05, 302.02, 301.3 , 300.68, 299.88, 299.43,\n       299.26, 299.11, 299.25, 299.31, 299.4 , 300.02, 300.49, 301.25,\n       301.45, 301.34, 300.76, 299.82, 299.44, 299.38, 298.94, 298.95,\n       298.97, 298.98, 299.63, 300.57, 300.87, 301.  , 300.67, 300.26,\n       300.25, 300.7 , 300.79, 300.68, 300.23, 300.56, 301.37, 301.75,\n       301.72, 301.39, 300.78, 300.12, 299.85, 300.46, 300.41, 300.22,\n       300.24, 300.29, 300.97, 301.47, 300.74, 300.45, 300.04, 299.33,\n       298.92, 298.45, 298.49, 298.68, 298.73, 298.96, 299.9 , 300.55])","content_type":"text/plain"}}}],"key":"DVw40ivtYQ"}],"key":"Ej2k4PsEIG"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As described above, when our temperature-conversion function accepts a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a1p0WB26oI"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q6lyOlcEco"},{"type":"text","value":" as an argument, it returns a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mIFVLXTcFM"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jO7oG2MkLH"},{"type":"text","value":". We can directly assign this returned ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TMrJVvda7m"},{"type":"inlineCode","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qTdGT1QaKt"},{"type":"text","value":" to a new column in our ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gr64jrfAL8"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HWmydFZNuM"},{"type":"text","value":", as shown below:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pquwiJAEeC"}],"key":"fWonTgq2PX"}],"key":"Y9h3YNsD4u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df['Nino34_degK'] = convert_degc_to_kelvin(nino34_series)","key":"rDTbhdMmvR"},{"type":"output","id":"FB7-_oTkAMHxamKQ1XO43","data":[],"key":"VRDrwKtHGr"}],"key":"XqL94U1nT0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.Nino34_degK","key":"FlQ0kb2ice"},{"type":"output","id":"dgl-6YNdTAT993bxp3B7g","data":[{"output_type":"execute_result","execution_count":58,"metadata":{},"data":{"text/plain":{"content":"datetime\n1982-01-01    299.87\n1982-02-01    299.85\n1982-03-01    300.35\n1982-04-01    301.17\n1982-05-01    301.69\n               ...  \n2020-12-01    298.68\n2021-01-01    298.73\n2021-02-01    298.96\n2021-03-01    299.90\n2021-04-01    300.55\nName: Nino34_degK, Length: 472, dtype: float64","content_type":"text/plain"}}}],"key":"tiHqhdu6Qg"}],"key":"HuWnW6pyof"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this final example, we demonstrate the use of the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VpZei934eq"},{"type":"inlineCode","value":"to_csv","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Za1fIPAiyo"},{"type":"text","value":" method to save a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ig42XfEzWE"},{"type":"inlineCode","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OSvYwxDrd1"},{"type":"text","value":" as a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dzxIkPRuad"},{"type":"inlineCode","value":".csv","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bqkcYgdWbF"},{"type":"text","value":" file. This example also demonstrates the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bgg4t56aZe"},{"type":"inlineCode","value":"read_csv","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SvBNCjFRxt"},{"type":"text","value":" method, which reads ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MWUC897zge"},{"type":"inlineCode","value":".csv","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TSX5KrGAMx"},{"type":"text","value":" files into Pandas ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lA4vp6dhfG"},{"type":"inlineCode","value":"DataFrames","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jje5fYyomd"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lbNAFmDSAA"}],"key":"xeL4DSG2GG"}],"key":"h5Rx1wlUcI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df.to_csv('nino_analyzed_output.csv')","key":"rWrGksj8fm"},{"type":"output","id":"gRJWx8tCjZQzlEhTXcJy7","data":[],"key":"mqhZsey0sg"}],"key":"duoHRKdNgF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pd.read_csv('nino_analyzed_output.csv', index_col=0, parse_dates=True)","key":"u3kW0sAVjW"},{"type":"output","id":"dLolbXJzx8yWTG4Xqt4lx","data":[{"output_type":"execute_result","execution_count":60,"metadata":{},"data":{"text/plain":{"content":"            Nino12  Nino12anom  Nino3  Nino3anom  Nino4  Nino4anom  Nino34  \\\ndatetime                                                                     \n1982-01-01   24.29       -0.17  25.87       0.24  28.30       0.00   26.72   \n1982-02-01   25.49       -0.58  26.38       0.01  28.21       0.11   26.70   \n1982-03-01   25.21       -1.31  26.98      -0.16  28.41       0.22   27.20   \n1982-04-01   24.50       -0.97  27.68       0.18  28.92       0.42   28.02   \n1982-05-01   23.97       -0.23  27.79       0.71  29.49       0.70   28.54   \n...            ...         ...    ...        ...    ...        ...     ...   \n2020-12-01   22.16       -0.60  24.38      -0.83  27.65      -0.95   25.53   \n2021-01-01   23.89       -0.64  25.06      -0.55  27.10      -1.25   25.58   \n2021-02-01   25.55       -0.66  25.80      -0.57  27.20      -1.00   25.81   \n2021-03-01   26.48       -0.26  26.80      -0.39  27.79      -0.55   26.75   \n2021-04-01   24.89       -0.80  26.96      -0.65  28.47      -0.21   27.40   \n\n            Nino34anom  month  Nino34_degK  \ndatetime                                    \n1982-01-01        0.15      1       299.87  \n1982-02-01       -0.02      2       299.85  \n1982-03-01       -0.02      3       300.35  \n1982-04-01        0.24      4       301.17  \n1982-05-01        0.69      5       301.69  \n...                ...    ...          ...  \n2020-12-01       -1.12     12       298.68  \n2021-01-01       -0.99      1       298.73  \n2021-02-01       -0.92      2       298.96  \n2021-03-01       -0.51      3       299.90  \n2021-04-01       -0.49      4       300.55  \n\n[472 rows x 10 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nino12</th>\n      <th>Nino12anom</th>\n      <th>Nino3</th>\n      <th>Nino3anom</th>\n      <th>Nino4</th>\n      <th>Nino4anom</th>\n      <th>Nino34</th>\n      <th>Nino34anom</th>\n      <th>month</th>\n      <th>Nino34_degK</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1982-01-01</th>\n      <td>24.29</td>\n      <td>-0.17</td>\n      <td>25.87</td>\n      <td>0.24</td>\n      <td>28.30</td>\n      <td>0.00</td>\n      <td>26.72</td>\n      <td>0.15</td>\n      <td>1</td>\n      <td>299.87</td>\n    </tr>\n    <tr>\n      <th>1982-02-01</th>\n      <td>25.49</td>\n      <td>-0.58</td>\n      <td>26.38</td>\n      <td>0.01</td>\n      <td>28.21</td>\n      <td>0.11</td>\n      <td>26.70</td>\n      <td>-0.02</td>\n      <td>2</td>\n      <td>299.85</td>\n    </tr>\n    <tr>\n      <th>1982-03-01</th>\n      <td>25.21</td>\n      <td>-1.31</td>\n      <td>26.98</td>\n      <td>-0.16</td>\n      <td>28.41</td>\n      <td>0.22</td>\n      <td>27.20</td>\n      <td>-0.02</td>\n      <td>3</td>\n      <td>300.35</td>\n    </tr>\n    <tr>\n      <th>1982-04-01</th>\n      <td>24.50</td>\n      <td>-0.97</td>\n      <td>27.68</td>\n      <td>0.18</td>\n      <td>28.92</td>\n      <td>0.42</td>\n      <td>28.02</td>\n      <td>0.24</td>\n      <td>4</td>\n      <td>301.17</td>\n    </tr>\n    <tr>\n      <th>1982-05-01</th>\n      <td>23.97</td>\n      <td>-0.23</td>\n      <td>27.79</td>\n      <td>0.71</td>\n      <td>29.49</td>\n      <td>0.70</td>\n      <td>28.54</td>\n      <td>0.69</td>\n      <td>5</td>\n      <td>301.69</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2020-12-01</th>\n      <td>22.16</td>\n      <td>-0.60</td>\n      <td>24.38</td>\n      <td>-0.83</td>\n      <td>27.65</td>\n      <td>-0.95</td>\n      <td>25.53</td>\n      <td>-1.12</td>\n      <td>12</td>\n      <td>298.68</td>\n    </tr>\n    <tr>\n      <th>2021-01-01</th>\n      <td>23.89</td>\n      <td>-0.64</td>\n      <td>25.06</td>\n      <td>-0.55</td>\n      <td>27.10</td>\n      <td>-1.25</td>\n      <td>25.58</td>\n      <td>-0.99</td>\n      <td>1</td>\n      <td>298.73</td>\n    </tr>\n    <tr>\n      <th>2021-02-01</th>\n      <td>25.55</td>\n      <td>-0.66</td>\n      <td>25.80</td>\n      <td>-0.57</td>\n      <td>27.20</td>\n      <td>-1.00</td>\n      <td>25.81</td>\n      <td>-0.92</td>\n      <td>2</td>\n      <td>298.96</td>\n    </tr>\n    <tr>\n      <th>2021-03-01</th>\n      <td>26.48</td>\n      <td>-0.26</td>\n      <td>26.80</td>\n      <td>-0.39</td>\n      <td>27.79</td>\n      <td>-0.55</td>\n      <td>26.75</td>\n      <td>-0.51</td>\n      <td>3</td>\n      <td>299.90</td>\n    </tr>\n    <tr>\n      <th>2021-04-01</th>\n      <td>24.89</td>\n      <td>-0.80</td>\n      <td>26.96</td>\n      <td>-0.65</td>\n      <td>28.47</td>\n      <td>-0.21</td>\n      <td>27.40</td>\n      <td>-0.49</td>\n      <td>4</td>\n      <td>300.55</td>\n    </tr>\n  </tbody>\n</table>\n<p>472 rows × 10 columns</p>\n</div>","content_type":"text/html"}}}],"key":"mqAxZKY0Nd"}],"key":"k0296QIw92"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zVX6jWM8dC"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"RjJh17o7Rw"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"IVhys3hBVf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Pandas is a very powerful tool for working with tabular (i.e., spreadsheet-style) data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TeRK5NISM6"}],"key":"oZNc9SMts2"}],"key":"lzjn4pcTuv"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"There are multiple ways of subsetting your pandas dataframe or series","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"AtpKVU3tjb"}],"key":"LQWRWO6RBB"}],"key":"honYQBXCYI"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Pandas allows you to refer to subsets of data by label, which generally makes code more readable and more robust","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fFL1n1ktPk"}],"key":"NQPOGFLmjV"}],"key":"zZpMdAH2dc"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Pandas can be helpful for exploratory data analysis, including plotting and basic statistics","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"gXDj4qLuhX"}],"key":"Mm7XoAucHW"}],"key":"eKeLjNLoP4"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"One can apply calculations to pandas dataframes and save the output via ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"OuGgX0tdY7"},{"type":"inlineCode","value":"csv","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WuaOODSV1P"},{"type":"text","value":" files","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"xe5hrtGpks"}],"key":"GzWJ22SyG9"}],"key":"UBxma9XZXZ"}],"key":"cFwA8WXA6g"},{"type":"heading","depth":3,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"What’s Next?","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"dfxV6bpG1s"}],"identifier":"whats-next","label":"What’s Next?","html_id":"whats-next","implicit":true,"key":"OSvDuYdPzS"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"In the next notebook, we will look more into using pandas for more in-depth data analysis.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ilWzc2EbyL"}],"key":"gqLnVulFII"},{"type":"heading","depth":2,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Additional Resources","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"h2LlLGAkWa"}],"identifier":"additional-resources","label":"Additional Resources","html_id":"additional-resources","implicit":true,"key":"fSWm1ClKvl"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","children":[{"type":"link","url":"https://www.ncei.noaa.gov/access/monitoring/enso/sst","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"ENSO data used in this example","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"Cl2IhwdxEA"}],"urlSource":"https://www.ncei.noaa.gov/access/monitoring/enso/sst","key":"heIOSXIqYj"}],"key":"bKaFHt0T6F"}],"key":"YFCXP4CbvO"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","children":[{"type":"link","url":"https://pandas.pydata.org/docs/getting_started/index.html#getting-started","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Getting Started with Pandas","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"vnLcqnDfcz"}],"urlSource":"https://pandas.pydata.org/docs/getting_started/index.html#getting-started","key":"RCWGN8rrg8"}],"key":"AkdDnmfY0B"}],"key":"gaShBY3OD3"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","children":[{"type":"link","url":"https://pandas.pydata.org/docs/user_guide/index.html#user-guide","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Pandas User Guide","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"BeMo4EYew9"}],"urlSource":"https://pandas.pydata.org/docs/user_guide/index.html#user-guide","key":"N3RMBAbtj3"}],"key":"uDUmMagLCI"}],"key":"VSxgItclGi"}],"key":"y6TXe5qZU3"}],"key":"yXBtj7F5H5"}],"key":"vLC3sM246j"},"references":{"cite":{"order":["reback2020pandas","harris2020array"],"data":{"reback2020pandas":{"label":"reback2020pandas","enumerator":"1","doi":"10.5281/zenodo.3509134","html":"The Pandas Development Team. (2020). <i>pandas-dev/pandas: Pandas</i> (latest) [Computer software]. Zenodo. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.5281/zenodo.3509134\">10.5281/zenodo.3509134</a>","url":"https://doi.org/10.5281/zenodo.3509134"},"harris2020array":{"label":"harris2020array","enumerator":"2","doi":"10.1038/s41586-020-2649-2","html":"Harris, C. R., Millman, K. J., van der Walt, S. J., Gommers, R., Virtanen, P., Cournapeau, D., Wieser, E., Taylor, J., Berg, S., Smith, N. J., Kern, R., Picus, M., Hoyer, S., van Kerkwijk, M. H., Brett, M., Haldane, A., del Río, J. F., Wiebe, M., Peterson, P., … Oliphant, T. E. (2020). Array programming with NumPy. <i>Nature</i>, <i>585</i>(7825), 357–362. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1038/s41586-020-2649-2\">10.1038/s41586-020-2649-2</a>","url":"https://doi.org/10.1038/s41586-020-2649-2"}}}},"footer":{"navigation":{"prev":{"title":"Pandas","url":"/core/pandas","group":"Core Scientific Python packages"},"next":{"title":"Data Formats","url":"/core/data-formats","group":"Core Scientific Python packages"}}},"domain":"http://localhost:3000"}